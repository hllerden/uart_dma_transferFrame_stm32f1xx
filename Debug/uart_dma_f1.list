
uart_dma_f1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002190  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  0800229c  0800229c  0001229c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080022ec  080022ec  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080022ec  080022ec  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080022ec  080022ec  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080022ec  080022ec  000122ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080022f0  080022f0  000122f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080022f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  20000010  08002304  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  08002304  00020128  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY
 13 .debug_info   00004ab4  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000174a  00000000  00000000  00024b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006b8  00000000  00000000  00026280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000004de  00000000  00000000  00026938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000170f3  00000000  00000000  00026e16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00006b95  00000000  00000000  0003df09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00081fa9  00000000  00000000  00044a9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000019b4  00000000  00000000  000c6a48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  000c83fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08002284 	.word	0x08002284

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08002284 	.word	0x08002284

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800015c:	b480      	push	{r7}
 800015e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000160:	4b04      	ldr	r3, [pc, #16]	; (8000174 <__NVIC_GetPriorityGrouping+0x18>)
 8000162:	68db      	ldr	r3, [r3, #12]
 8000164:	0a1b      	lsrs	r3, r3, #8
 8000166:	f003 0307 	and.w	r3, r3, #7
}
 800016a:	4618      	mov	r0, r3
 800016c:	46bd      	mov	sp, r7
 800016e:	bc80      	pop	{r7}
 8000170:	4770      	bx	lr
 8000172:	bf00      	nop
 8000174:	e000ed00 	.word	0xe000ed00

08000178 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000178:	b480      	push	{r7}
 800017a:	b083      	sub	sp, #12
 800017c:	af00      	add	r7, sp, #0
 800017e:	4603      	mov	r3, r0
 8000180:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000186:	2b00      	cmp	r3, #0
 8000188:	db0b      	blt.n	80001a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800018a:	79fb      	ldrb	r3, [r7, #7]
 800018c:	f003 021f 	and.w	r2, r3, #31
 8000190:	4906      	ldr	r1, [pc, #24]	; (80001ac <__NVIC_EnableIRQ+0x34>)
 8000192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000196:	095b      	lsrs	r3, r3, #5
 8000198:	2001      	movs	r0, #1
 800019a:	fa00 f202 	lsl.w	r2, r0, r2
 800019e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001a2:	bf00      	nop
 80001a4:	370c      	adds	r7, #12
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bc80      	pop	{r7}
 80001aa:	4770      	bx	lr
 80001ac:	e000e100 	.word	0xe000e100

080001b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001b0:	b480      	push	{r7}
 80001b2:	b083      	sub	sp, #12
 80001b4:	af00      	add	r7, sp, #0
 80001b6:	4603      	mov	r3, r0
 80001b8:	6039      	str	r1, [r7, #0]
 80001ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001c0:	2b00      	cmp	r3, #0
 80001c2:	db0a      	blt.n	80001da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001c4:	683b      	ldr	r3, [r7, #0]
 80001c6:	b2da      	uxtb	r2, r3
 80001c8:	490c      	ldr	r1, [pc, #48]	; (80001fc <__NVIC_SetPriority+0x4c>)
 80001ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001ce:	0112      	lsls	r2, r2, #4
 80001d0:	b2d2      	uxtb	r2, r2
 80001d2:	440b      	add	r3, r1
 80001d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80001d8:	e00a      	b.n	80001f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001da:	683b      	ldr	r3, [r7, #0]
 80001dc:	b2da      	uxtb	r2, r3
 80001de:	4908      	ldr	r1, [pc, #32]	; (8000200 <__NVIC_SetPriority+0x50>)
 80001e0:	79fb      	ldrb	r3, [r7, #7]
 80001e2:	f003 030f 	and.w	r3, r3, #15
 80001e6:	3b04      	subs	r3, #4
 80001e8:	0112      	lsls	r2, r2, #4
 80001ea:	b2d2      	uxtb	r2, r2
 80001ec:	440b      	add	r3, r1
 80001ee:	761a      	strb	r2, [r3, #24]
}
 80001f0:	bf00      	nop
 80001f2:	370c      	adds	r7, #12
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bc80      	pop	{r7}
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	e000e100 	.word	0xe000e100
 8000200:	e000ed00 	.word	0xe000ed00

08000204 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000204:	b480      	push	{r7}
 8000206:	b089      	sub	sp, #36	; 0x24
 8000208:	af00      	add	r7, sp, #0
 800020a:	60f8      	str	r0, [r7, #12]
 800020c:	60b9      	str	r1, [r7, #8]
 800020e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000210:	68fb      	ldr	r3, [r7, #12]
 8000212:	f003 0307 	and.w	r3, r3, #7
 8000216:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000218:	69fb      	ldr	r3, [r7, #28]
 800021a:	f1c3 0307 	rsb	r3, r3, #7
 800021e:	2b04      	cmp	r3, #4
 8000220:	bf28      	it	cs
 8000222:	2304      	movcs	r3, #4
 8000224:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000226:	69fb      	ldr	r3, [r7, #28]
 8000228:	3304      	adds	r3, #4
 800022a:	2b06      	cmp	r3, #6
 800022c:	d902      	bls.n	8000234 <NVIC_EncodePriority+0x30>
 800022e:	69fb      	ldr	r3, [r7, #28]
 8000230:	3b03      	subs	r3, #3
 8000232:	e000      	b.n	8000236 <NVIC_EncodePriority+0x32>
 8000234:	2300      	movs	r3, #0
 8000236:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000238:	f04f 32ff 	mov.w	r2, #4294967295
 800023c:	69bb      	ldr	r3, [r7, #24]
 800023e:	fa02 f303 	lsl.w	r3, r2, r3
 8000242:	43da      	mvns	r2, r3
 8000244:	68bb      	ldr	r3, [r7, #8]
 8000246:	401a      	ands	r2, r3
 8000248:	697b      	ldr	r3, [r7, #20]
 800024a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800024c:	f04f 31ff 	mov.w	r1, #4294967295
 8000250:	697b      	ldr	r3, [r7, #20]
 8000252:	fa01 f303 	lsl.w	r3, r1, r3
 8000256:	43d9      	mvns	r1, r3
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800025c:	4313      	orrs	r3, r2
         );
}
 800025e:	4618      	mov	r0, r3
 8000260:	3724      	adds	r7, #36	; 0x24
 8000262:	46bd      	mov	sp, r7
 8000264:	bc80      	pop	{r7}
 8000266:	4770      	bx	lr

08000268 <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000268:	b480      	push	{r7}
 800026a:	b083      	sub	sp, #12
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]
 8000270:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8000272:	683b      	ldr	r3, [r7, #0]
 8000274:	3b01      	subs	r3, #1
 8000276:	4a0a      	ldr	r2, [pc, #40]	; (80002a0 <LL_DMA_EnableChannel+0x38>)
 8000278:	5cd3      	ldrb	r3, [r2, r3]
 800027a:	461a      	mov	r2, r3
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	4413      	add	r3, r2
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	683a      	ldr	r2, [r7, #0]
 8000284:	3a01      	subs	r2, #1
 8000286:	4906      	ldr	r1, [pc, #24]	; (80002a0 <LL_DMA_EnableChannel+0x38>)
 8000288:	5c8a      	ldrb	r2, [r1, r2]
 800028a:	4611      	mov	r1, r2
 800028c:	687a      	ldr	r2, [r7, #4]
 800028e:	440a      	add	r2, r1
 8000290:	f043 0301 	orr.w	r3, r3, #1
 8000294:	6013      	str	r3, [r2, #0]
}
 8000296:	bf00      	nop
 8000298:	370c      	adds	r7, #12
 800029a:	46bd      	mov	sp, r7
 800029c:	bc80      	pop	{r7}
 800029e:	4770      	bx	lr
 80002a0:	080022b0 	.word	0x080022b0

080002a4 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 80002a4:	b480      	push	{r7}
 80002a6:	b085      	sub	sp, #20
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	60f8      	str	r0, [r7, #12]
 80002ac:	60b9      	str	r1, [r7, #8]
 80002ae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 80002b0:	68bb      	ldr	r3, [r7, #8]
 80002b2:	3b01      	subs	r3, #1
 80002b4:	4a0c      	ldr	r2, [pc, #48]	; (80002e8 <LL_DMA_SetDataTransferDirection+0x44>)
 80002b6:	5cd3      	ldrb	r3, [r2, r3]
 80002b8:	461a      	mov	r2, r3
 80002ba:	68fb      	ldr	r3, [r7, #12]
 80002bc:	4413      	add	r3, r2
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80002c4:	f023 0310 	bic.w	r3, r3, #16
 80002c8:	68ba      	ldr	r2, [r7, #8]
 80002ca:	3a01      	subs	r2, #1
 80002cc:	4906      	ldr	r1, [pc, #24]	; (80002e8 <LL_DMA_SetDataTransferDirection+0x44>)
 80002ce:	5c8a      	ldrb	r2, [r1, r2]
 80002d0:	4611      	mov	r1, r2
 80002d2:	68fa      	ldr	r2, [r7, #12]
 80002d4:	440a      	add	r2, r1
 80002d6:	4611      	mov	r1, r2
 80002d8:	687a      	ldr	r2, [r7, #4]
 80002da:	4313      	orrs	r3, r2
 80002dc:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 80002de:	bf00      	nop
 80002e0:	3714      	adds	r7, #20
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bc80      	pop	{r7}
 80002e6:	4770      	bx	lr
 80002e8:	080022b0 	.word	0x080022b0

080002ec <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 80002ec:	b480      	push	{r7}
 80002ee:	b085      	sub	sp, #20
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	60f8      	str	r0, [r7, #12]
 80002f4:	60b9      	str	r1, [r7, #8]
 80002f6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 80002f8:	68bb      	ldr	r3, [r7, #8]
 80002fa:	3b01      	subs	r3, #1
 80002fc:	4a0b      	ldr	r2, [pc, #44]	; (800032c <LL_DMA_SetMode+0x40>)
 80002fe:	5cd3      	ldrb	r3, [r2, r3]
 8000300:	461a      	mov	r2, r3
 8000302:	68fb      	ldr	r3, [r7, #12]
 8000304:	4413      	add	r3, r2
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 0220 	bic.w	r2, r3, #32
 800030c:	68bb      	ldr	r3, [r7, #8]
 800030e:	3b01      	subs	r3, #1
 8000310:	4906      	ldr	r1, [pc, #24]	; (800032c <LL_DMA_SetMode+0x40>)
 8000312:	5ccb      	ldrb	r3, [r1, r3]
 8000314:	4619      	mov	r1, r3
 8000316:	68fb      	ldr	r3, [r7, #12]
 8000318:	440b      	add	r3, r1
 800031a:	4619      	mov	r1, r3
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	4313      	orrs	r3, r2
 8000320:	600b      	str	r3, [r1, #0]
             Mode);
}
 8000322:	bf00      	nop
 8000324:	3714      	adds	r7, #20
 8000326:	46bd      	mov	sp, r7
 8000328:	bc80      	pop	{r7}
 800032a:	4770      	bx	lr
 800032c:	080022b0 	.word	0x080022b0

08000330 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 8000330:	b480      	push	{r7}
 8000332:	b085      	sub	sp, #20
 8000334:	af00      	add	r7, sp, #0
 8000336:	60f8      	str	r0, [r7, #12]
 8000338:	60b9      	str	r1, [r7, #8]
 800033a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 800033c:	68bb      	ldr	r3, [r7, #8]
 800033e:	3b01      	subs	r3, #1
 8000340:	4a0b      	ldr	r2, [pc, #44]	; (8000370 <LL_DMA_SetPeriphIncMode+0x40>)
 8000342:	5cd3      	ldrb	r3, [r2, r3]
 8000344:	461a      	mov	r2, r3
 8000346:	68fb      	ldr	r3, [r7, #12]
 8000348:	4413      	add	r3, r2
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000350:	68bb      	ldr	r3, [r7, #8]
 8000352:	3b01      	subs	r3, #1
 8000354:	4906      	ldr	r1, [pc, #24]	; (8000370 <LL_DMA_SetPeriphIncMode+0x40>)
 8000356:	5ccb      	ldrb	r3, [r1, r3]
 8000358:	4619      	mov	r1, r3
 800035a:	68fb      	ldr	r3, [r7, #12]
 800035c:	440b      	add	r3, r1
 800035e:	4619      	mov	r1, r3
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	4313      	orrs	r3, r2
 8000364:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 8000366:	bf00      	nop
 8000368:	3714      	adds	r7, #20
 800036a:	46bd      	mov	sp, r7
 800036c:	bc80      	pop	{r7}
 800036e:	4770      	bx	lr
 8000370:	080022b0 	.word	0x080022b0

08000374 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8000374:	b480      	push	{r7}
 8000376:	b085      	sub	sp, #20
 8000378:	af00      	add	r7, sp, #0
 800037a:	60f8      	str	r0, [r7, #12]
 800037c:	60b9      	str	r1, [r7, #8]
 800037e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8000380:	68bb      	ldr	r3, [r7, #8]
 8000382:	3b01      	subs	r3, #1
 8000384:	4a0b      	ldr	r2, [pc, #44]	; (80003b4 <LL_DMA_SetMemoryIncMode+0x40>)
 8000386:	5cd3      	ldrb	r3, [r2, r3]
 8000388:	461a      	mov	r2, r3
 800038a:	68fb      	ldr	r3, [r7, #12]
 800038c:	4413      	add	r3, r2
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000394:	68bb      	ldr	r3, [r7, #8]
 8000396:	3b01      	subs	r3, #1
 8000398:	4906      	ldr	r1, [pc, #24]	; (80003b4 <LL_DMA_SetMemoryIncMode+0x40>)
 800039a:	5ccb      	ldrb	r3, [r1, r3]
 800039c:	4619      	mov	r1, r3
 800039e:	68fb      	ldr	r3, [r7, #12]
 80003a0:	440b      	add	r3, r1
 80003a2:	4619      	mov	r1, r3
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	4313      	orrs	r3, r2
 80003a8:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 80003aa:	bf00      	nop
 80003ac:	3714      	adds	r7, #20
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bc80      	pop	{r7}
 80003b2:	4770      	bx	lr
 80003b4:	080022b0 	.word	0x080022b0

080003b8 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 80003b8:	b480      	push	{r7}
 80003ba:	b085      	sub	sp, #20
 80003bc:	af00      	add	r7, sp, #0
 80003be:	60f8      	str	r0, [r7, #12]
 80003c0:	60b9      	str	r1, [r7, #8]
 80003c2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 80003c4:	68bb      	ldr	r3, [r7, #8]
 80003c6:	3b01      	subs	r3, #1
 80003c8:	4a0b      	ldr	r2, [pc, #44]	; (80003f8 <LL_DMA_SetPeriphSize+0x40>)
 80003ca:	5cd3      	ldrb	r3, [r2, r3]
 80003cc:	461a      	mov	r2, r3
 80003ce:	68fb      	ldr	r3, [r7, #12]
 80003d0:	4413      	add	r3, r2
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80003d8:	68bb      	ldr	r3, [r7, #8]
 80003da:	3b01      	subs	r3, #1
 80003dc:	4906      	ldr	r1, [pc, #24]	; (80003f8 <LL_DMA_SetPeriphSize+0x40>)
 80003de:	5ccb      	ldrb	r3, [r1, r3]
 80003e0:	4619      	mov	r1, r3
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	440b      	add	r3, r1
 80003e6:	4619      	mov	r1, r3
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	4313      	orrs	r3, r2
 80003ec:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 80003ee:	bf00      	nop
 80003f0:	3714      	adds	r7, #20
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bc80      	pop	{r7}
 80003f6:	4770      	bx	lr
 80003f8:	080022b0 	.word	0x080022b0

080003fc <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 80003fc:	b480      	push	{r7}
 80003fe:	b085      	sub	sp, #20
 8000400:	af00      	add	r7, sp, #0
 8000402:	60f8      	str	r0, [r7, #12]
 8000404:	60b9      	str	r1, [r7, #8]
 8000406:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8000408:	68bb      	ldr	r3, [r7, #8]
 800040a:	3b01      	subs	r3, #1
 800040c:	4a0b      	ldr	r2, [pc, #44]	; (800043c <LL_DMA_SetMemorySize+0x40>)
 800040e:	5cd3      	ldrb	r3, [r2, r3]
 8000410:	461a      	mov	r2, r3
 8000412:	68fb      	ldr	r3, [r7, #12]
 8000414:	4413      	add	r3, r2
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800041c:	68bb      	ldr	r3, [r7, #8]
 800041e:	3b01      	subs	r3, #1
 8000420:	4906      	ldr	r1, [pc, #24]	; (800043c <LL_DMA_SetMemorySize+0x40>)
 8000422:	5ccb      	ldrb	r3, [r1, r3]
 8000424:	4619      	mov	r1, r3
 8000426:	68fb      	ldr	r3, [r7, #12]
 8000428:	440b      	add	r3, r1
 800042a:	4619      	mov	r1, r3
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	4313      	orrs	r3, r2
 8000430:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 8000432:	bf00      	nop
 8000434:	3714      	adds	r7, #20
 8000436:	46bd      	mov	sp, r7
 8000438:	bc80      	pop	{r7}
 800043a:	4770      	bx	lr
 800043c:	080022b0 	.word	0x080022b0

08000440 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8000440:	b480      	push	{r7}
 8000442:	b085      	sub	sp, #20
 8000444:	af00      	add	r7, sp, #0
 8000446:	60f8      	str	r0, [r7, #12]
 8000448:	60b9      	str	r1, [r7, #8]
 800044a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 800044c:	68bb      	ldr	r3, [r7, #8]
 800044e:	3b01      	subs	r3, #1
 8000450:	4a0b      	ldr	r2, [pc, #44]	; (8000480 <LL_DMA_SetChannelPriorityLevel+0x40>)
 8000452:	5cd3      	ldrb	r3, [r2, r3]
 8000454:	461a      	mov	r2, r3
 8000456:	68fb      	ldr	r3, [r7, #12]
 8000458:	4413      	add	r3, r2
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8000460:	68bb      	ldr	r3, [r7, #8]
 8000462:	3b01      	subs	r3, #1
 8000464:	4906      	ldr	r1, [pc, #24]	; (8000480 <LL_DMA_SetChannelPriorityLevel+0x40>)
 8000466:	5ccb      	ldrb	r3, [r1, r3]
 8000468:	4619      	mov	r1, r3
 800046a:	68fb      	ldr	r3, [r7, #12]
 800046c:	440b      	add	r3, r1
 800046e:	4619      	mov	r1, r3
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	4313      	orrs	r3, r2
 8000474:	600b      	str	r3, [r1, #0]
             Priority);
}
 8000476:	bf00      	nop
 8000478:	3714      	adds	r7, #20
 800047a:	46bd      	mov	sp, r7
 800047c:	bc80      	pop	{r7}
 800047e:	4770      	bx	lr
 8000480:	080022b0 	.word	0x080022b0

08000484 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 8000484:	b480      	push	{r7}
 8000486:	b085      	sub	sp, #20
 8000488:	af00      	add	r7, sp, #0
 800048a:	60f8      	str	r0, [r7, #12]
 800048c:	60b9      	str	r1, [r7, #8]
 800048e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8000490:	68bb      	ldr	r3, [r7, #8]
 8000492:	3b01      	subs	r3, #1
 8000494:	4a0b      	ldr	r2, [pc, #44]	; (80004c4 <LL_DMA_SetDataLength+0x40>)
 8000496:	5cd3      	ldrb	r3, [r2, r3]
 8000498:	461a      	mov	r2, r3
 800049a:	68fb      	ldr	r3, [r7, #12]
 800049c:	4413      	add	r3, r2
 800049e:	685b      	ldr	r3, [r3, #4]
 80004a0:	0c1b      	lsrs	r3, r3, #16
 80004a2:	041b      	lsls	r3, r3, #16
 80004a4:	68ba      	ldr	r2, [r7, #8]
 80004a6:	3a01      	subs	r2, #1
 80004a8:	4906      	ldr	r1, [pc, #24]	; (80004c4 <LL_DMA_SetDataLength+0x40>)
 80004aa:	5c8a      	ldrb	r2, [r1, r2]
 80004ac:	4611      	mov	r1, r2
 80004ae:	68fa      	ldr	r2, [r7, #12]
 80004b0:	440a      	add	r2, r1
 80004b2:	4611      	mov	r1, r2
 80004b4:	687a      	ldr	r2, [r7, #4]
 80004b6:	4313      	orrs	r3, r2
 80004b8:	604b      	str	r3, [r1, #4]
             DMA_CNDTR_NDT, NbData);
}
 80004ba:	bf00      	nop
 80004bc:	3714      	adds	r7, #20
 80004be:	46bd      	mov	sp, r7
 80004c0:	bc80      	pop	{r7}
 80004c2:	4770      	bx	lr
 80004c4:	080022b0 	.word	0x080022b0

080004c8 <LL_DMA_GetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_DMA_GetDataLength(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
 80004d0:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 80004d2:	683b      	ldr	r3, [r7, #0]
 80004d4:	3b01      	subs	r3, #1
 80004d6:	4a06      	ldr	r2, [pc, #24]	; (80004f0 <LL_DMA_GetDataLength+0x28>)
 80004d8:	5cd3      	ldrb	r3, [r2, r3]
 80004da:	461a      	mov	r2, r3
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	4413      	add	r3, r2
 80004e0:	685b      	ldr	r3, [r3, #4]
 80004e2:	b29b      	uxth	r3, r3
                   DMA_CNDTR_NDT));
}
 80004e4:	4618      	mov	r0, r3
 80004e6:	370c      	adds	r7, #12
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bc80      	pop	{r7}
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop
 80004f0:	080022b0 	.word	0x080022b0

080004f4 <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  MemoryAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryAddress)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b085      	sub	sp, #20
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	60f8      	str	r0, [r7, #12]
 80004fc:	60b9      	str	r1, [r7, #8]
 80004fe:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8000500:	68bb      	ldr	r3, [r7, #8]
 8000502:	3b01      	subs	r3, #1
 8000504:	4a06      	ldr	r2, [pc, #24]	; (8000520 <LL_DMA_SetMemoryAddress+0x2c>)
 8000506:	5cd3      	ldrb	r3, [r2, r3]
 8000508:	461a      	mov	r2, r3
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	4413      	add	r3, r2
 800050e:	461a      	mov	r2, r3
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	60d3      	str	r3, [r2, #12]
}
 8000514:	bf00      	nop
 8000516:	3714      	adds	r7, #20
 8000518:	46bd      	mov	sp, r7
 800051a:	bc80      	pop	{r7}
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	080022b0 	.word	0x080022b0

08000524 <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  PeriphAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
 8000524:	b480      	push	{r7}
 8000526:	b085      	sub	sp, #20
 8000528:	af00      	add	r7, sp, #0
 800052a:	60f8      	str	r0, [r7, #12]
 800052c:	60b9      	str	r1, [r7, #8]
 800052e:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8000530:	68bb      	ldr	r3, [r7, #8]
 8000532:	3b01      	subs	r3, #1
 8000534:	4a06      	ldr	r2, [pc, #24]	; (8000550 <LL_DMA_SetPeriphAddress+0x2c>)
 8000536:	5cd3      	ldrb	r3, [r2, r3]
 8000538:	461a      	mov	r2, r3
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	4413      	add	r3, r2
 800053e:	461a      	mov	r2, r3
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	6093      	str	r3, [r2, #8]
}
 8000544:	bf00      	nop
 8000546:	3714      	adds	r7, #20
 8000548:	46bd      	mov	sp, r7
 800054a:	bc80      	pop	{r7}
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	080022b0 	.word	0x080022b0

08000554 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
 800055c:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 800055e:	683b      	ldr	r3, [r7, #0]
 8000560:	3b01      	subs	r3, #1
 8000562:	4a0a      	ldr	r2, [pc, #40]	; (800058c <LL_DMA_EnableIT_TC+0x38>)
 8000564:	5cd3      	ldrb	r3, [r2, r3]
 8000566:	461a      	mov	r2, r3
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	4413      	add	r3, r2
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	683a      	ldr	r2, [r7, #0]
 8000570:	3a01      	subs	r2, #1
 8000572:	4906      	ldr	r1, [pc, #24]	; (800058c <LL_DMA_EnableIT_TC+0x38>)
 8000574:	5c8a      	ldrb	r2, [r1, r2]
 8000576:	4611      	mov	r1, r2
 8000578:	687a      	ldr	r2, [r7, #4]
 800057a:	440a      	add	r2, r1
 800057c:	f043 0302 	orr.w	r3, r3, #2
 8000580:	6013      	str	r3, [r2, #0]
}
 8000582:	bf00      	nop
 8000584:	370c      	adds	r7, #12
 8000586:	46bd      	mov	sp, r7
 8000588:	bc80      	pop	{r7}
 800058a:	4770      	bx	lr
 800058c:	080022b0 	.word	0x080022b0

08000590 <LL_DMA_EnableIT_HT>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
 8000598:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_HTIE);
 800059a:	683b      	ldr	r3, [r7, #0]
 800059c:	3b01      	subs	r3, #1
 800059e:	4a0a      	ldr	r2, [pc, #40]	; (80005c8 <LL_DMA_EnableIT_HT+0x38>)
 80005a0:	5cd3      	ldrb	r3, [r2, r3]
 80005a2:	461a      	mov	r2, r3
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	4413      	add	r3, r2
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	683a      	ldr	r2, [r7, #0]
 80005ac:	3a01      	subs	r2, #1
 80005ae:	4906      	ldr	r1, [pc, #24]	; (80005c8 <LL_DMA_EnableIT_HT+0x38>)
 80005b0:	5c8a      	ldrb	r2, [r1, r2]
 80005b2:	4611      	mov	r1, r2
 80005b4:	687a      	ldr	r2, [r7, #4]
 80005b6:	440a      	add	r2, r1
 80005b8:	f043 0304 	orr.w	r3, r3, #4
 80005bc:	6013      	str	r3, [r2, #0]
}
 80005be:	bf00      	nop
 80005c0:	370c      	adds	r7, #12
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bc80      	pop	{r7}
 80005c6:	4770      	bx	lr
 80005c8:	080022b0 	.word	0x080022b0

080005cc <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	68db      	ldr	r3, [r3, #12]
 80005d8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	60da      	str	r2, [r3, #12]
}
 80005e0:	bf00      	nop
 80005e2:	370c      	adds	r7, #12
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bc80      	pop	{r7}
 80005e8:	4770      	bx	lr

080005ea <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80005ea:	b480      	push	{r7}
 80005ec:	b083      	sub	sp, #12
 80005ee:	af00      	add	r7, sp, #0
 80005f0:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	691b      	ldr	r3, [r3, #16]
 80005f6:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	695b      	ldr	r3, [r3, #20]
 8000602:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	615a      	str	r2, [r3, #20]
}
 800060a:	bf00      	nop
 800060c:	370c      	adds	r7, #12
 800060e:	46bd      	mov	sp, r7
 8000610:	bc80      	pop	{r7}
 8000612:	4770      	bx	lr

08000614 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll SR           TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000624:	2b40      	cmp	r3, #64	; 0x40
 8000626:	bf0c      	ite	eq
 8000628:	2301      	moveq	r3, #1
 800062a:	2300      	movne	r3, #0
 800062c:	b2db      	uxtb	r3, r3
}
 800062e:	4618      	mov	r0, r3
 8000630:	370c      	adds	r7, #12
 8000632:	46bd      	mov	sp, r7
 8000634:	bc80      	pop	{r7}
 8000636:	4770      	bx	lr

08000638 <LL_USART_EnableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
 8000638:	b480      	push	{r7}
 800063a:	b089      	sub	sp, #36	; 0x24
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	330c      	adds	r3, #12
 8000644:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	e853 3f00 	ldrex	r3, [r3]
 800064c:	60bb      	str	r3, [r7, #8]
   return(result);
 800064e:	68bb      	ldr	r3, [r7, #8]
 8000650:	f043 0310 	orr.w	r3, r3, #16
 8000654:	61fb      	str	r3, [r7, #28]
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	330c      	adds	r3, #12
 800065a:	69fa      	ldr	r2, [r7, #28]
 800065c:	61ba      	str	r2, [r7, #24]
 800065e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000660:	6979      	ldr	r1, [r7, #20]
 8000662:	69ba      	ldr	r2, [r7, #24]
 8000664:	e841 2300 	strex	r3, r2, [r1]
 8000668:	613b      	str	r3, [r7, #16]
   return(result);
 800066a:	693b      	ldr	r3, [r7, #16]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d1e7      	bne.n	8000640 <LL_USART_EnableIT_IDLE+0x8>
}
 8000670:	bf00      	nop
 8000672:	bf00      	nop
 8000674:	3724      	adds	r7, #36	; 0x24
 8000676:	46bd      	mov	sp, r7
 8000678:	bc80      	pop	{r7}
 800067a:	4770      	bx	lr

0800067c <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 800067c:	b480      	push	{r7}
 800067e:	b089      	sub	sp, #36	; 0x24
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	3314      	adds	r3, #20
 8000688:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	e853 3f00 	ldrex	r3, [r3]
 8000690:	60bb      	str	r3, [r7, #8]
   return(result);
 8000692:	68bb      	ldr	r3, [r7, #8]
 8000694:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000698:	61fb      	str	r3, [r7, #28]
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	3314      	adds	r3, #20
 800069e:	69fa      	ldr	r2, [r7, #28]
 80006a0:	61ba      	str	r2, [r7, #24]
 80006a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80006a4:	6979      	ldr	r1, [r7, #20]
 80006a6:	69ba      	ldr	r2, [r7, #24]
 80006a8:	e841 2300 	strex	r3, r2, [r1]
 80006ac:	613b      	str	r3, [r7, #16]
   return(result);
 80006ae:	693b      	ldr	r3, [r7, #16]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d1e7      	bne.n	8000684 <LL_USART_EnableDMAReq_RX+0x8>
}
 80006b4:	bf00      	nop
 80006b6:	bf00      	nop
 80006b8:	3724      	adds	r7, #36	; 0x24
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bc80      	pop	{r7}
 80006be:	4770      	bx	lr

080006c0 <LL_USART_DMA_GetRegAddr>:
  * @note   Address of Data Register is valid for both Transmit and Receive transfers.
  * @param  USARTx USART Instance
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(const USART_TypeDef *USARTx)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  /* return address of DR register */
  return ((uint32_t) &(USARTx->DR));
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	3304      	adds	r3, #4
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	370c      	adds	r7, #12
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bc80      	pop	{r7}
 80006d4:	4770      	bx	lr
	...

080006d8 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80006d8:	b480      	push	{r7}
 80006da:	b085      	sub	sp, #20
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80006e0:	4b08      	ldr	r3, [pc, #32]	; (8000704 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80006e2:	695a      	ldr	r2, [r3, #20]
 80006e4:	4907      	ldr	r1, [pc, #28]	; (8000704 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	4313      	orrs	r3, r2
 80006ea:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80006ec:	4b05      	ldr	r3, [pc, #20]	; (8000704 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80006ee:	695a      	ldr	r2, [r3, #20]
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	4013      	ands	r3, r2
 80006f4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006f6:	68fb      	ldr	r3, [r7, #12]
}
 80006f8:	bf00      	nop
 80006fa:	3714      	adds	r7, #20
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bc80      	pop	{r7}
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	40021000 	.word	0x40021000

08000708 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000708:	b480      	push	{r7}
 800070a:	b085      	sub	sp, #20
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000710:	4b08      	ldr	r3, [pc, #32]	; (8000734 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000712:	699a      	ldr	r2, [r3, #24]
 8000714:	4907      	ldr	r1, [pc, #28]	; (8000734 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	4313      	orrs	r3, r2
 800071a:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800071c:	4b05      	ldr	r3, [pc, #20]	; (8000734 <LL_APB2_GRP1_EnableClock+0x2c>)
 800071e:	699a      	ldr	r2, [r3, #24]
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	4013      	ands	r3, r2
 8000724:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000726:	68fb      	ldr	r3, [r7, #12]
}
 8000728:	bf00      	nop
 800072a:	3714      	adds	r7, #20
 800072c:	46bd      	mov	sp, r7
 800072e:	bc80      	pop	{r7}
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	40021000 	.word	0x40021000

08000738 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000738:	b5b0      	push	{r4, r5, r7, lr}
 800073a:	b086      	sub	sp, #24
 800073c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800073e:	f000 fd07 	bl	8001150 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000742:	f000 f815 	bl	8000770 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000746:	f000 f925 	bl	8000994 <MX_GPIO_Init>
  MX_DMA_Init();
 800074a:	f000 f90b 	bl	8000964 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800074e:	f000 f851 	bl	80007f4 <MX_USART1_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  uint8_t Test[] = "Hello World !!!\r\n"; //Data to send
 8000752:	4b06      	ldr	r3, [pc, #24]	; (800076c <main+0x34>)
 8000754:	1d3c      	adds	r4, r7, #4
 8000756:	461d      	mov	r5, r3
 8000758:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800075a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800075c:	682b      	ldr	r3, [r5, #0]
 800075e:	8023      	strh	r3, [r4, #0]
	  //HAL_UART_Transmit(&huart1,Test,sizeof(Test),10);// Sending in normal mode
	  HAL_Delay(1000);
 8000760:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000764:	f000 fd56 	bl	8001214 <HAL_Delay>
  {
 8000768:	e7f3      	b.n	8000752 <main+0x1a>
 800076a:	bf00      	nop
 800076c:	0800229c 	.word	0x0800229c

08000770 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b090      	sub	sp, #64	; 0x40
 8000774:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000776:	f107 0318 	add.w	r3, r7, #24
 800077a:	2228      	movs	r2, #40	; 0x28
 800077c:	2100      	movs	r1, #0
 800077e:	4618      	mov	r0, r3
 8000780:	f001 fd54 	bl	800222c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000784:	1d3b      	adds	r3, r7, #4
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]
 800078c:	609a      	str	r2, [r3, #8]
 800078e:	60da      	str	r2, [r3, #12]
 8000790:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000792:	2302      	movs	r3, #2
 8000794:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000796:	2301      	movs	r3, #1
 8000798:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800079a:	2310      	movs	r3, #16
 800079c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800079e:	2302      	movs	r3, #2
 80007a0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80007a2:	2300      	movs	r3, #0
 80007a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80007a6:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80007aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ac:	f107 0318 	add.w	r3, r7, #24
 80007b0:	4618      	mov	r0, r3
 80007b2:	f000 fe37 	bl	8001424 <HAL_RCC_OscConfig>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80007bc:	f000 f9f2 	bl	8000ba4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c0:	230f      	movs	r3, #15
 80007c2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c4:	2302      	movs	r3, #2
 80007c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c8:	2300      	movs	r3, #0
 80007ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007d2:	2300      	movs	r3, #0
 80007d4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007d6:	1d3b      	adds	r3, r7, #4
 80007d8:	2102      	movs	r1, #2
 80007da:	4618      	mov	r0, r3
 80007dc:	f001 f8a4 	bl	8001928 <HAL_RCC_ClockConfig>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80007e6:	f000 f9dd 	bl	8000ba4 <Error_Handler>
  }
}
 80007ea:	bf00      	nop
 80007ec:	3740      	adds	r7, #64	; 0x40
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
	...

080007f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b08c      	sub	sp, #48	; 0x30
 80007f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80007fa:	f107 0314 	add.w	r3, r7, #20
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]
 8000806:	60da      	str	r2, [r3, #12]
 8000808:	611a      	str	r2, [r3, #16]
 800080a:	615a      	str	r2, [r3, #20]
 800080c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080e:	463b      	mov	r3, r7
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
 8000816:	609a      	str	r2, [r3, #8]
 8000818:	60da      	str	r2, [r3, #12]
 800081a:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 800081c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000820:	f7ff ff72 	bl	8000708 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8000824:	2004      	movs	r0, #4
 8000826:	f7ff ff6f 	bl	8000708 <LL_APB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 800082a:	4b48      	ldr	r3, [pc, #288]	; (800094c <MX_USART1_UART_Init+0x158>)
 800082c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800082e:	2309      	movs	r3, #9
 8000830:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000832:	2303      	movs	r3, #3
 8000834:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800083a:	463b      	mov	r3, r7
 800083c:	4619      	mov	r1, r3
 800083e:	4844      	ldr	r0, [pc, #272]	; (8000950 <MX_USART1_UART_Init+0x15c>)
 8000840:	f001 fa86 	bl	8001d50 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8000844:	4b43      	ldr	r3, [pc, #268]	; (8000954 <MX_USART1_UART_Init+0x160>)
 8000846:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8000848:	2304      	movs	r3, #4
 800084a:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800084c:	463b      	mov	r3, r7
 800084e:	4619      	mov	r1, r3
 8000850:	483f      	ldr	r0, [pc, #252]	; (8000950 <MX_USART1_UART_Init+0x15c>)
 8000852:	f001 fa7d 	bl	8001d50 <LL_GPIO_Init>

  /* USART1 DMA Init */

  /* USART1_RX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_5, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8000856:	2200      	movs	r2, #0
 8000858:	2105      	movs	r1, #5
 800085a:	483f      	ldr	r0, [pc, #252]	; (8000958 <MX_USART1_UART_Init+0x164>)
 800085c:	f7ff fd22 	bl	80002a4 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_5, LL_DMA_PRIORITY_LOW);
 8000860:	2200      	movs	r2, #0
 8000862:	2105      	movs	r1, #5
 8000864:	483c      	ldr	r0, [pc, #240]	; (8000958 <MX_USART1_UART_Init+0x164>)
 8000866:	f7ff fdeb 	bl	8000440 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_5, LL_DMA_MODE_CIRCULAR);
 800086a:	2220      	movs	r2, #32
 800086c:	2105      	movs	r1, #5
 800086e:	483a      	ldr	r0, [pc, #232]	; (8000958 <MX_USART1_UART_Init+0x164>)
 8000870:	f7ff fd3c 	bl	80002ec <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_5, LL_DMA_PERIPH_NOINCREMENT);
 8000874:	2200      	movs	r2, #0
 8000876:	2105      	movs	r1, #5
 8000878:	4837      	ldr	r0, [pc, #220]	; (8000958 <MX_USART1_UART_Init+0x164>)
 800087a:	f7ff fd59 	bl	8000330 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_5, LL_DMA_MEMORY_INCREMENT);
 800087e:	2280      	movs	r2, #128	; 0x80
 8000880:	2105      	movs	r1, #5
 8000882:	4835      	ldr	r0, [pc, #212]	; (8000958 <MX_USART1_UART_Init+0x164>)
 8000884:	f7ff fd76 	bl	8000374 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_5, LL_DMA_PDATAALIGN_BYTE);
 8000888:	2200      	movs	r2, #0
 800088a:	2105      	movs	r1, #5
 800088c:	4832      	ldr	r0, [pc, #200]	; (8000958 <MX_USART1_UART_Init+0x164>)
 800088e:	f7ff fd93 	bl	80003b8 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_5, LL_DMA_MDATAALIGN_BYTE);
 8000892:	2200      	movs	r2, #0
 8000894:	2105      	movs	r1, #5
 8000896:	4830      	ldr	r0, [pc, #192]	; (8000958 <MX_USART1_UART_Init+0x164>)
 8000898:	f7ff fdb0 	bl	80003fc <LL_DMA_SetMemorySize>

  LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_5, LL_USART_DMA_GetRegAddr(USART1));
 800089c:	482f      	ldr	r0, [pc, #188]	; (800095c <MX_USART1_UART_Init+0x168>)
 800089e:	f7ff ff0f 	bl	80006c0 <LL_USART_DMA_GetRegAddr>
 80008a2:	4603      	mov	r3, r0
 80008a4:	461a      	mov	r2, r3
 80008a6:	2105      	movs	r1, #5
 80008a8:	482b      	ldr	r0, [pc, #172]	; (8000958 <MX_USART1_UART_Init+0x164>)
 80008aa:	f7ff fe3b 	bl	8000524 <LL_DMA_SetPeriphAddress>
  LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_5, (uint32_t)usart_rx_dma_buffer);
 80008ae:	4b2c      	ldr	r3, [pc, #176]	; (8000960 <MX_USART1_UART_Init+0x16c>)
 80008b0:	461a      	mov	r2, r3
 80008b2:	2105      	movs	r1, #5
 80008b4:	4828      	ldr	r0, [pc, #160]	; (8000958 <MX_USART1_UART_Init+0x164>)
 80008b6:	f7ff fe1d 	bl	80004f4 <LL_DMA_SetMemoryAddress>
  LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_5, ARRAY_LEN(usart_rx_dma_buffer));
 80008ba:	2240      	movs	r2, #64	; 0x40
 80008bc:	2105      	movs	r1, #5
 80008be:	4826      	ldr	r0, [pc, #152]	; (8000958 <MX_USART1_UART_Init+0x164>)
 80008c0:	f7ff fde0 	bl	8000484 <LL_DMA_SetDataLength>

  /* Enable HT & TC interrupts */
  LL_DMA_EnableIT_HT(DMA1, LL_DMA_CHANNEL_5);
 80008c4:	2105      	movs	r1, #5
 80008c6:	4824      	ldr	r0, [pc, #144]	; (8000958 <MX_USART1_UART_Init+0x164>)
 80008c8:	f7ff fe62 	bl	8000590 <LL_DMA_EnableIT_HT>
  LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_5);
 80008cc:	2105      	movs	r1, #5
 80008ce:	4822      	ldr	r0, [pc, #136]	; (8000958 <MX_USART1_UART_Init+0x164>)
 80008d0:	f7ff fe40 	bl	8000554 <LL_DMA_EnableIT_TC>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80008d4:	f7ff fc42 	bl	800015c <__NVIC_GetPriorityGrouping>
 80008d8:	4603      	mov	r3, r0
 80008da:	2200      	movs	r2, #0
 80008dc:	2100      	movs	r1, #0
 80008de:	4618      	mov	r0, r3
 80008e0:	f7ff fc90 	bl	8000204 <NVIC_EncodePriority>
 80008e4:	4603      	mov	r3, r0
 80008e6:	4619      	mov	r1, r3
 80008e8:	2025      	movs	r0, #37	; 0x25
 80008ea:	f7ff fc61 	bl	80001b0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 80008ee:	2025      	movs	r0, #37	; 0x25
 80008f0:	f7ff fc42 	bl	8000178 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80008f4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80008f8:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80008fa:	2300      	movs	r3, #0
 80008fc:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80008fe:	2300      	movs	r3, #0
 8000900:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000902:	2300      	movs	r3, #0
 8000904:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000906:	230c      	movs	r3, #12
 8000908:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800090a:	2300      	movs	r3, #0
 800090c:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800090e:	2300      	movs	r3, #0
 8000910:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_USART_Init(USART1, &USART_InitStruct);
 8000912:	f107 0314 	add.w	r3, r7, #20
 8000916:	4619      	mov	r1, r3
 8000918:	4810      	ldr	r0, [pc, #64]	; (800095c <MX_USART1_UART_Init+0x168>)
 800091a:	f001 fc27 	bl	800216c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 800091e:	480f      	ldr	r0, [pc, #60]	; (800095c <MX_USART1_UART_Init+0x168>)
 8000920:	f7ff fe63 	bl	80005ea <LL_USART_ConfigAsyncMode>

  LL_USART_Enable(USART1);
 8000924:	480d      	ldr	r0, [pc, #52]	; (800095c <MX_USART1_UART_Init+0x168>)
 8000926:	f7ff fe51 	bl	80005cc <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */
  LL_USART_EnableDMAReq_RX(USART1);
 800092a:	480c      	ldr	r0, [pc, #48]	; (800095c <MX_USART1_UART_Init+0x168>)
 800092c:	f7ff fea6 	bl	800067c <LL_USART_EnableDMAReq_RX>
  LL_USART_EnableIT_IDLE(USART1);
 8000930:	480a      	ldr	r0, [pc, #40]	; (800095c <MX_USART1_UART_Init+0x168>)
 8000932:	f7ff fe81 	bl	8000638 <LL_USART_EnableIT_IDLE>

  /* Enable USART and DMA */
  LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_5);
 8000936:	2105      	movs	r1, #5
 8000938:	4807      	ldr	r0, [pc, #28]	; (8000958 <MX_USART1_UART_Init+0x164>)
 800093a:	f7ff fc95 	bl	8000268 <LL_DMA_EnableChannel>
  LL_USART_Enable(USART1);
 800093e:	4807      	ldr	r0, [pc, #28]	; (800095c <MX_USART1_UART_Init+0x168>)
 8000940:	f7ff fe44 	bl	80005cc <LL_USART_Enable>
  /* USER CODE END USART1_Init 2 */

}
 8000944:	bf00      	nop
 8000946:	3730      	adds	r7, #48	; 0x30
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	04020002 	.word	0x04020002
 8000950:	40010800 	.word	0x40010800
 8000954:	04040004 	.word	0x04040004
 8000958:	40020000 	.word	0x40020000
 800095c:	40013800 	.word	0x40013800
 8000960:	2000002c 	.word	0x2000002c

08000964 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8000968:	2001      	movs	r0, #1
 800096a:	f7ff feb5 	bl	80006d8 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800096e:	f7ff fbf5 	bl	800015c <__NVIC_GetPriorityGrouping>
 8000972:	4603      	mov	r3, r0
 8000974:	2200      	movs	r2, #0
 8000976:	2100      	movs	r1, #0
 8000978:	4618      	mov	r0, r3
 800097a:	f7ff fc43 	bl	8000204 <NVIC_EncodePriority>
 800097e:	4603      	mov	r3, r0
 8000980:	4619      	mov	r1, r3
 8000982:	200f      	movs	r0, #15
 8000984:	f7ff fc14 	bl	80001b0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000988:	200f      	movs	r0, #15
 800098a:	f7ff fbf5 	bl	8000178 <__NVIC_EnableIRQ>

}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
	...

08000994 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000994:	b480      	push	{r7}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800099a:	4b08      	ldr	r3, [pc, #32]	; (80009bc <MX_GPIO_Init+0x28>)
 800099c:	699b      	ldr	r3, [r3, #24]
 800099e:	4a07      	ldr	r2, [pc, #28]	; (80009bc <MX_GPIO_Init+0x28>)
 80009a0:	f043 0304 	orr.w	r3, r3, #4
 80009a4:	6193      	str	r3, [r2, #24]
 80009a6:	4b05      	ldr	r3, [pc, #20]	; (80009bc <MX_GPIO_Init+0x28>)
 80009a8:	699b      	ldr	r3, [r3, #24]
 80009aa:	f003 0304 	and.w	r3, r3, #4
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009b2:	bf00      	nop
 80009b4:	370c      	adds	r7, #12
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bc80      	pop	{r7}
 80009ba:	4770      	bx	lr
 80009bc:	40021000 	.word	0x40021000

080009c0 <usart_rx_check>:
	     }
}

*/
void usart_rx_check(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
    static size_t old_pos;

	size_t pos;
	size_t dmaWhatPose=LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_5);
 80009c6:	2105      	movs	r1, #5
 80009c8:	4826      	ldr	r0, [pc, #152]	; (8000a64 <usart_rx_check+0xa4>)
 80009ca:	f7ff fd7d 	bl	80004c8 <LL_DMA_GetDataLength>
 80009ce:	6078      	str	r0, [r7, #4]
	 pos = ARRAY_LEN(usart_rx_dma_buffer) - LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_5);
 80009d0:	2105      	movs	r1, #5
 80009d2:	4824      	ldr	r0, [pc, #144]	; (8000a64 <usart_rx_check+0xa4>)
 80009d4:	f7ff fd78 	bl	80004c8 <LL_DMA_GetDataLength>
 80009d8:	4603      	mov	r3, r0
 80009da:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80009de:	603b      	str	r3, [r7, #0]
	 if (pos != old_pos) {
 80009e0:	4b21      	ldr	r3, [pc, #132]	; (8000a68 <usart_rx_check+0xa8>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	683a      	ldr	r2, [r7, #0]
 80009e6:	429a      	cmp	r2, r3
 80009e8:	d037      	beq.n	8000a5a <usart_rx_check+0x9a>
		 if (pos > old_pos) {
 80009ea:	4b1f      	ldr	r3, [pc, #124]	; (8000a68 <usart_rx_check+0xa8>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	683a      	ldr	r2, [r7, #0]
 80009f0:	429a      	cmp	r2, r3
 80009f2:	d918      	bls.n	8000a26 <usart_rx_check+0x66>

			 usart_process_data(&usart_rx_dma_buffer[old_pos], pos - old_pos,false,-1);
 80009f4:	4b1c      	ldr	r3, [pc, #112]	; (8000a68 <usart_rx_check+0xa8>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a1c      	ldr	r2, [pc, #112]	; (8000a6c <usart_rx_check+0xac>)
 80009fa:	1898      	adds	r0, r3, r2
 80009fc:	4b1a      	ldr	r3, [pc, #104]	; (8000a68 <usart_rx_check+0xa8>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	683a      	ldr	r2, [r7, #0]
 8000a02:	1ad1      	subs	r1, r2, r3
 8000a04:	f04f 33ff 	mov.w	r3, #4294967295
 8000a08:	2200      	movs	r2, #0
 8000a0a:	f000 f835 	bl	8000a78 <usart_process_data>
			 ArrivedDataLengs[HowManyDataPackArrive]=pos - old_pos;
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	b2da      	uxtb	r2, r3
 8000a12:	4b15      	ldr	r3, [pc, #84]	; (8000a68 <usart_rx_check+0xa8>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	4915      	ldr	r1, [pc, #84]	; (8000a70 <usart_rx_check+0xb0>)
 8000a1a:	8809      	ldrh	r1, [r1, #0]
 8000a1c:	1ad3      	subs	r3, r2, r3
 8000a1e:	b2da      	uxtb	r2, r3
 8000a20:	4b14      	ldr	r3, [pc, #80]	; (8000a74 <usart_rx_check+0xb4>)
 8000a22:	545a      	strb	r2, [r3, r1]
 8000a24:	e016      	b.n	8000a54 <usart_rx_check+0x94>
	         }
	         else {
	         	 usart_process_data(&usart_rx_dma_buffer[old_pos], ARRAY_LEN(usart_rx_dma_buffer) - old_pos,false,-1);
 8000a26:	4b10      	ldr	r3, [pc, #64]	; (8000a68 <usart_rx_check+0xa8>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4a10      	ldr	r2, [pc, #64]	; (8000a6c <usart_rx_check+0xac>)
 8000a2c:	1898      	adds	r0, r3, r2
 8000a2e:	4b0e      	ldr	r3, [pc, #56]	; (8000a68 <usart_rx_check+0xa8>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	f1c3 0140 	rsb	r1, r3, #64	; 0x40
 8000a36:	f04f 33ff 	mov.w	r3, #4294967295
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	f000 f81c 	bl	8000a78 <usart_process_data>
	         	 if (pos > 0) {
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d006      	beq.n	8000a54 <usart_rx_check+0x94>
	         		 usart_process_data(&usart_rx_dma_buffer[0], pos,false,-1);
 8000a46:	f04f 33ff 	mov.w	r3, #4294967295
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	6839      	ldr	r1, [r7, #0]
 8000a4e:	4807      	ldr	r0, [pc, #28]	; (8000a6c <usart_rx_check+0xac>)
 8000a50:	f000 f812 	bl	8000a78 <usart_process_data>
	         	  }
	         }
		 old_pos = pos;
 8000a54:	4a04      	ldr	r2, [pc, #16]	; (8000a68 <usart_rx_check+0xa8>)
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	6013      	str	r3, [r2, #0]
	 }
}
 8000a5a:	bf00      	nop
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40020000 	.word	0x40020000
 8000a68:	200000d4 	.word	0x200000d4
 8000a6c:	2000002c 	.word	0x2000002c
 8000a70:	2000006c 	.word	0x2000006c
 8000a74:	20000070 	.word	0x20000070

08000a78 <usart_process_data>:


void usart_process_data(const void* data, size_t len,bool isOwerFlow,int newPos) {
 8000a78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000a7c:	b089      	sub	sp, #36	; 0x24
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	60f8      	str	r0, [r7, #12]
 8000a82:	60b9      	str	r1, [r7, #8]
 8000a84:	603b      	str	r3, [r7, #0]
 8000a86:	4613      	mov	r3, r2
 8000a88:	71fb      	strb	r3, [r7, #7]
 8000a8a:	466b      	mov	r3, sp
 8000a8c:	461e      	mov	r6, r3
    const uint8_t* d = data;
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	61fb      	str	r3, [r7, #28]
    char proccesBuffer[len];
 8000a92:	68b9      	ldr	r1, [r7, #8]
 8000a94:	460b      	mov	r3, r1
 8000a96:	3b01      	subs	r3, #1
 8000a98:	61bb      	str	r3, [r7, #24]
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	4688      	mov	r8, r1
 8000a9e:	4699      	mov	r9, r3
 8000aa0:	f04f 0200 	mov.w	r2, #0
 8000aa4:	f04f 0300 	mov.w	r3, #0
 8000aa8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000aac:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000ab0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	460c      	mov	r4, r1
 8000ab8:	461d      	mov	r5, r3
 8000aba:	f04f 0200 	mov.w	r2, #0
 8000abe:	f04f 0300 	mov.w	r3, #0
 8000ac2:	00eb      	lsls	r3, r5, #3
 8000ac4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000ac8:	00e2      	lsls	r2, r4, #3
 8000aca:	1dcb      	adds	r3, r1, #7
 8000acc:	08db      	lsrs	r3, r3, #3
 8000ace:	00db      	lsls	r3, r3, #3
 8000ad0:	ebad 0d03 	sub.w	sp, sp, r3
 8000ad4:	466b      	mov	r3, sp
 8000ad6:	3300      	adds	r3, #0
 8000ad8:	617b      	str	r3, [r7, #20]
     *
     * For the sake of this example, function does a loop-back data over UART in polling mode.
     * Check ringbuff RX-based example for implementation with TX & RX DMA transfer.
     */

	for (; len > 0; --len, ++d) {
 8000ada:	e016      	b.n	8000b0a <usart_process_data+0x92>
		if(parserRx(*d))
 8000adc:	69fb      	ldr	r3, [r7, #28]
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f000 f9b3 	bl	8000e4c <parserRx>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d008      	beq.n	8000afe <usart_process_data+0x86>
		{
			//Tam bir data geldi işleme konabilir
			HowManyDataPackArrive++;
 8000aec:	4b10      	ldr	r3, [pc, #64]	; (8000b30 <usart_process_data+0xb8>)
 8000aee:	881b      	ldrh	r3, [r3, #0]
 8000af0:	3301      	adds	r3, #1
 8000af2:	b29a      	uxth	r2, r3
 8000af4:	4b0e      	ldr	r3, [pc, #56]	; (8000b30 <usart_process_data+0xb8>)
 8000af6:	801a      	strh	r2, [r3, #0]
			uart_state=0;
 8000af8:	4b0e      	ldr	r3, [pc, #56]	; (8000b34 <usart_process_data+0xbc>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	701a      	strb	r2, [r3, #0]
	for (; len > 0; --len, ++d) {
 8000afe:	68bb      	ldr	r3, [r7, #8]
 8000b00:	3b01      	subs	r3, #1
 8000b02:	60bb      	str	r3, [r7, #8]
 8000b04:	69fb      	ldr	r3, [r7, #28]
 8000b06:	3301      	adds	r3, #1
 8000b08:	61fb      	str	r3, [r7, #28]
 8000b0a:	68bb      	ldr	r3, [r7, #8]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d1e5      	bne.n	8000adc <usart_process_data+0x64>
    for (; len > 0; --len, ++d) {
        LL_USART_TransmitData8(USART1, *d);
        while (!LL_USART_IsActiveFlag_TXE(USART1)) {}
    }
    */
    reverseString(proccesBuffer);
 8000b10:	6978      	ldr	r0, [r7, #20]
 8000b12:	f000 f813 	bl	8000b3c <reverseString>


    while (!LL_USART_IsActiveFlag_TC(USART1)) {}
 8000b16:	bf00      	nop
 8000b18:	4807      	ldr	r0, [pc, #28]	; (8000b38 <usart_process_data+0xc0>)
 8000b1a:	f7ff fd7b 	bl	8000614 <LL_USART_IsActiveFlag_TC>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d0f9      	beq.n	8000b18 <usart_process_data+0xa0>
 8000b24:	46b5      	mov	sp, r6
}
 8000b26:	bf00      	nop
 8000b28:	3724      	adds	r7, #36	; 0x24
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000b30:	2000006c 	.word	0x2000006c
 8000b34:	200000d8 	.word	0x200000d8
 8000b38:	40013800 	.word	0x40013800

08000b3c <reverseString>:

void reverseString(char* str) {
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b086      	sub	sp, #24
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]

    int length = strlen(str);
 8000b44:	6878      	ldr	r0, [r7, #4]
 8000b46:	f7ff fb01 	bl	800014c <strlen>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	613b      	str	r3, [r7, #16]
    for (int i = 0; i < length / 2; i++) {
 8000b4e:	2300      	movs	r3, #0
 8000b50:	617b      	str	r3, [r7, #20]
 8000b52:	e01a      	b.n	8000b8a <reverseString+0x4e>
        char temp = str[i];
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	687a      	ldr	r2, [r7, #4]
 8000b58:	4413      	add	r3, r2
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	73fb      	strb	r3, [r7, #15]
        str[i] = str[length - i - 1];
 8000b5e:	693a      	ldr	r2, [r7, #16]
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	1ad3      	subs	r3, r2, r3
 8000b64:	3b01      	subs	r3, #1
 8000b66:	687a      	ldr	r2, [r7, #4]
 8000b68:	441a      	add	r2, r3
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	6879      	ldr	r1, [r7, #4]
 8000b6e:	440b      	add	r3, r1
 8000b70:	7812      	ldrb	r2, [r2, #0]
 8000b72:	701a      	strb	r2, [r3, #0]
        str[length - i - 1] = temp;
 8000b74:	693a      	ldr	r2, [r7, #16]
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	1ad3      	subs	r3, r2, r3
 8000b7a:	3b01      	subs	r3, #1
 8000b7c:	687a      	ldr	r2, [r7, #4]
 8000b7e:	4413      	add	r3, r2
 8000b80:	7bfa      	ldrb	r2, [r7, #15]
 8000b82:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < length / 2; i++) {
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	3301      	adds	r3, #1
 8000b88:	617b      	str	r3, [r7, #20]
 8000b8a:	693b      	ldr	r3, [r7, #16]
 8000b8c:	0fda      	lsrs	r2, r3, #31
 8000b8e:	4413      	add	r3, r2
 8000b90:	105b      	asrs	r3, r3, #1
 8000b92:	461a      	mov	r2, r3
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	4293      	cmp	r3, r2
 8000b98:	dbdc      	blt.n	8000b54 <reverseString+0x18>
    }
}
 8000b9a:	bf00      	nop
 8000b9c:	bf00      	nop
 8000b9e:	3718      	adds	r7, #24
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000ba8:	b672      	cpsid	i
}
 8000baa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bac:	e7fe      	b.n	8000bac <Error_Handler+0x8>
	...

08000bb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000bb6:	4b15      	ldr	r3, [pc, #84]	; (8000c0c <HAL_MspInit+0x5c>)
 8000bb8:	699b      	ldr	r3, [r3, #24]
 8000bba:	4a14      	ldr	r2, [pc, #80]	; (8000c0c <HAL_MspInit+0x5c>)
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	6193      	str	r3, [r2, #24]
 8000bc2:	4b12      	ldr	r3, [pc, #72]	; (8000c0c <HAL_MspInit+0x5c>)
 8000bc4:	699b      	ldr	r3, [r3, #24]
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	60bb      	str	r3, [r7, #8]
 8000bcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bce:	4b0f      	ldr	r3, [pc, #60]	; (8000c0c <HAL_MspInit+0x5c>)
 8000bd0:	69db      	ldr	r3, [r3, #28]
 8000bd2:	4a0e      	ldr	r2, [pc, #56]	; (8000c0c <HAL_MspInit+0x5c>)
 8000bd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bd8:	61d3      	str	r3, [r2, #28]
 8000bda:	4b0c      	ldr	r3, [pc, #48]	; (8000c0c <HAL_MspInit+0x5c>)
 8000bdc:	69db      	ldr	r3, [r3, #28]
 8000bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000be2:	607b      	str	r3, [r7, #4]
 8000be4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000be6:	4b0a      	ldr	r3, [pc, #40]	; (8000c10 <HAL_MspInit+0x60>)
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	60fb      	str	r3, [r7, #12]
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	4a04      	ldr	r2, [pc, #16]	; (8000c10 <HAL_MspInit+0x60>)
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c02:	bf00      	nop
 8000c04:	3714      	adds	r7, #20
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bc80      	pop	{r7}
 8000c0a:	4770      	bx	lr
 8000c0c:	40021000 	.word	0x40021000
 8000c10:	40010000 	.word	0x40010000

08000c14 <LL_DMA_IsActiveFlag_TC5>:
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF5) == (DMA_ISR_TCIF5));
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000c28:	bf0c      	ite	eq
 8000c2a:	2301      	moveq	r3, #1
 8000c2c:	2300      	movne	r3, #0
 8000c2e:	b2db      	uxtb	r3, r3
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	370c      	adds	r7, #12
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bc80      	pop	{r7}
 8000c38:	4770      	bx	lr

08000c3a <LL_DMA_IsActiveFlag_HT5>:
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	b083      	sub	sp, #12
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF5) == (DMA_ISR_HTIF5));
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c4a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000c4e:	bf0c      	ite	eq
 8000c50:	2301      	moveq	r3, #1
 8000c52:	2300      	movne	r3, #0
 8000c54:	b2db      	uxtb	r3, r3
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	370c      	adds	r7, #12
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bc80      	pop	{r7}
 8000c5e:	4770      	bx	lr

08000c60 <LL_DMA_ClearFlag_TC5>:
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF5);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c6e:	605a      	str	r2, [r3, #4]
}
 8000c70:	bf00      	nop
 8000c72:	370c      	adds	r7, #12
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bc80      	pop	{r7}
 8000c78:	4770      	bx	lr

08000c7a <LL_DMA_ClearFlag_HT5>:
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	b083      	sub	sp, #12
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF5);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000c88:	605a      	str	r2, [r3, #4]
}
 8000c8a:	bf00      	nop
 8000c8c:	370c      	adds	r7, #12
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bc80      	pop	{r7}
 8000c92:	4770      	bx	lr

08000c94 <LL_DMA_IsEnabledIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsEnabledIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	3b01      	subs	r3, #1
 8000ca2:	4a09      	ldr	r2, [pc, #36]	; (8000cc8 <LL_DMA_IsEnabledIT_TC+0x34>)
 8000ca4:	5cd3      	ldrb	r3, [r2, r3]
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	4413      	add	r3, r2
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f003 0302 	and.w	r3, r3, #2
                   DMA_CCR_TCIE) == (DMA_CCR_TCIE));
 8000cb2:	2b02      	cmp	r3, #2
 8000cb4:	bf0c      	ite	eq
 8000cb6:	2301      	moveq	r3, #1
 8000cb8:	2300      	movne	r3, #0
 8000cba:	b2db      	uxtb	r3, r3
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bc80      	pop	{r7}
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	080022b8 	.word	0x080022b8

08000ccc <LL_DMA_IsEnabledIT_HT>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsEnabledIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
 8000cd4:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	3b01      	subs	r3, #1
 8000cda:	4a09      	ldr	r2, [pc, #36]	; (8000d00 <LL_DMA_IsEnabledIT_HT+0x34>)
 8000cdc:	5cd3      	ldrb	r3, [r2, r3]
 8000cde:	461a      	mov	r2, r3
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f003 0304 	and.w	r3, r3, #4
                   DMA_CCR_HTIE) == (DMA_CCR_HTIE));
 8000cea:	2b04      	cmp	r3, #4
 8000cec:	bf0c      	ite	eq
 8000cee:	2301      	moveq	r3, #1
 8000cf0:	2300      	movne	r3, #0
 8000cf2:	b2db      	uxtb	r3, r3
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bc80      	pop	{r7}
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	080022b8 	.word	0x080022b8

08000d04 <LL_USART_IsActiveFlag_IDLE>:
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_IDLE) == (USART_SR_IDLE));
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f003 0310 	and.w	r3, r3, #16
 8000d14:	2b10      	cmp	r3, #16
 8000d16:	bf0c      	ite	eq
 8000d18:	2301      	moveq	r3, #1
 8000d1a:	2300      	movne	r3, #0
 8000d1c:	b2db      	uxtb	r3, r3
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	370c      	adds	r7, #12
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bc80      	pop	{r7}
 8000d26:	4770      	bx	lr

08000d28 <LL_USART_ClearFlag_IDLE>:
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b085      	sub	sp, #20
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  tmpreg = USARTx->SR;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8000d36:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8000d3e:	68fb      	ldr	r3, [r7, #12]
}
 8000d40:	bf00      	nop
 8000d42:	3714      	adds	r7, #20
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bc80      	pop	{r7}
 8000d48:	4770      	bx	lr

08000d4a <LL_USART_IsEnabledIT_IDLE>:
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	b083      	sub	sp, #12
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE));
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	68db      	ldr	r3, [r3, #12]
 8000d56:	f003 0310 	and.w	r3, r3, #16
 8000d5a:	2b10      	cmp	r3, #16
 8000d5c:	bf0c      	ite	eq
 8000d5e:	2301      	moveq	r3, #1
 8000d60:	2300      	movne	r3, #0
 8000d62:	b2db      	uxtb	r3, r3
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bc80      	pop	{r7}
 8000d6c:	4770      	bx	lr

08000d6e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d72:	e7fe      	b.n	8000d72 <NMI_Handler+0x4>

08000d74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d78:	e7fe      	b.n	8000d78 <HardFault_Handler+0x4>

08000d7a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d7e:	e7fe      	b.n	8000d7e <MemManage_Handler+0x4>

08000d80 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d84:	e7fe      	b.n	8000d84 <BusFault_Handler+0x4>

08000d86 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d86:	b480      	push	{r7}
 8000d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d8a:	e7fe      	b.n	8000d8a <UsageFault_Handler+0x4>

08000d8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bc80      	pop	{r7}
 8000d96:	4770      	bx	lr

08000d98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bc80      	pop	{r7}
 8000da2:	4770      	bx	lr

08000da4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bc80      	pop	{r7}
 8000dae:	4770      	bx	lr

08000db0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000db4:	f000 fa12 	bl	80011dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000db8:	bf00      	nop
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */
	 /* Check half-transfer complete interrupt */
	    if (LL_DMA_IsEnabledIT_HT(DMA1, LL_DMA_CHANNEL_5) && LL_DMA_IsActiveFlag_HT5(DMA1)) {
 8000dc0:	2105      	movs	r1, #5
 8000dc2:	4812      	ldr	r0, [pc, #72]	; (8000e0c <DMA1_Channel5_IRQHandler+0x50>)
 8000dc4:	f7ff ff82 	bl	8000ccc <LL_DMA_IsEnabledIT_HT>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d00a      	beq.n	8000de4 <DMA1_Channel5_IRQHandler+0x28>
 8000dce:	480f      	ldr	r0, [pc, #60]	; (8000e0c <DMA1_Channel5_IRQHandler+0x50>)
 8000dd0:	f7ff ff33 	bl	8000c3a <LL_DMA_IsActiveFlag_HT5>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d004      	beq.n	8000de4 <DMA1_Channel5_IRQHandler+0x28>
	        LL_DMA_ClearFlag_HT5(DMA1);             /* Clear half-transfer complete flag */
 8000dda:	480c      	ldr	r0, [pc, #48]	; (8000e0c <DMA1_Channel5_IRQHandler+0x50>)
 8000ddc:	f7ff ff4d 	bl	8000c7a <LL_DMA_ClearFlag_HT5>
	        usart_rx_check();                       /* Check for data to process */
 8000de0:	f7ff fdee 	bl	80009c0 <usart_rx_check>
	    }

	    /* Check transfer-complete interrupt */
	    if (LL_DMA_IsEnabledIT_TC(DMA1, LL_DMA_CHANNEL_5) && LL_DMA_IsActiveFlag_TC5(DMA1)) {
 8000de4:	2105      	movs	r1, #5
 8000de6:	4809      	ldr	r0, [pc, #36]	; (8000e0c <DMA1_Channel5_IRQHandler+0x50>)
 8000de8:	f7ff ff54 	bl	8000c94 <LL_DMA_IsEnabledIT_TC>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d00a      	beq.n	8000e08 <DMA1_Channel5_IRQHandler+0x4c>
 8000df2:	4806      	ldr	r0, [pc, #24]	; (8000e0c <DMA1_Channel5_IRQHandler+0x50>)
 8000df4:	f7ff ff0e 	bl	8000c14 <LL_DMA_IsActiveFlag_TC5>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d004      	beq.n	8000e08 <DMA1_Channel5_IRQHandler+0x4c>
	        LL_DMA_ClearFlag_TC5(DMA1);             /* Clear transfer complete flag */
 8000dfe:	4803      	ldr	r0, [pc, #12]	; (8000e0c <DMA1_Channel5_IRQHandler+0x50>)
 8000e00:	f7ff ff2e 	bl	8000c60 <LL_DMA_ClearFlag_TC5>
	        usart_rx_check();                       /* Check for data to process */
 8000e04:	f7ff fddc 	bl	80009c0 <usart_rx_check>
	    }
  /* USER CODE END DMA1_Channel5_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */
  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000e08:	bf00      	nop
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	40020000 	.word	0x40020000

08000e10 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	 if (LL_USART_IsEnabledIT_IDLE(USART1) && LL_USART_IsActiveFlag_IDLE(USART1)) {
 8000e14:	4809      	ldr	r0, [pc, #36]	; (8000e3c <USART1_IRQHandler+0x2c>)
 8000e16:	f7ff ff98 	bl	8000d4a <LL_USART_IsEnabledIT_IDLE>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d00a      	beq.n	8000e36 <USART1_IRQHandler+0x26>
 8000e20:	4806      	ldr	r0, [pc, #24]	; (8000e3c <USART1_IRQHandler+0x2c>)
 8000e22:	f7ff ff6f 	bl	8000d04 <LL_USART_IsActiveFlag_IDLE>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d004      	beq.n	8000e36 <USART1_IRQHandler+0x26>
	        LL_USART_ClearFlag_IDLE(USART1);        /* Clear IDLE line flag */
 8000e2c:	4803      	ldr	r0, [pc, #12]	; (8000e3c <USART1_IRQHandler+0x2c>)
 8000e2e:	f7ff ff7b 	bl	8000d28 <LL_USART_ClearFlag_IDLE>
	        usart_rx_check();                       /* Check for data to process */
 8000e32:	f7ff fdc5 	bl	80009c0 <usart_rx_check>
	    }
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40013800 	.word	0x40013800

08000e40 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bc80      	pop	{r7}
 8000e4a:	4770      	bx	lr

08000e4c <parserRx>:
	uart_state=0;
	counter=0;
}

bool parserRx(const void* data)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
	const uint8_t* d = data;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	60fb      	str	r3, [r7, #12]


    switch(uart_state){
 8000e58:	4b84      	ldr	r3, [pc, #528]	; (800106c <parserRx+0x220>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	2b06      	cmp	r3, #6
 8000e60:	f200 80ff 	bhi.w	8001062 <parserRx+0x216>
 8000e64:	a201      	add	r2, pc, #4	; (adr r2, 8000e6c <parserRx+0x20>)
 8000e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e6a:	bf00      	nop
 8000e6c:	08000e89 	.word	0x08000e89
 8000e70:	08000ea7 	.word	0x08000ea7
 8000e74:	08000ecd 	.word	0x08000ecd
 8000e78:	08000ef7 	.word	0x08000ef7
 8000e7c:	08000f21 	.word	0x08000f21
 8000e80:	08000f65 	.word	0x08000f65
 8000e84:	08001001 	.word	0x08001001
    case uart_h1:

    	if(d==h1)
 8000e88:	4b79      	ldr	r3, [pc, #484]	; (8001070 <parserRx+0x224>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d106      	bne.n	8000ea2 <parserRx+0x56>
    	{
    		uart_state++;
 8000e94:	4b75      	ldr	r3, [pc, #468]	; (800106c <parserRx+0x220>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	b2da      	uxtb	r2, r3
 8000e9e:	4b73      	ldr	r3, [pc, #460]	; (800106c <parserRx+0x220>)
 8000ea0:	701a      	strb	r2, [r3, #0]
    	}
    	return 0;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	e0dd      	b.n	8001062 <parserRx+0x216>
    	break;

    case uart_h2:
    	if(d==h2){
 8000ea6:	4b73      	ldr	r3, [pc, #460]	; (8001074 <parserRx+0x228>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	461a      	mov	r2, r3
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d107      	bne.n	8000ec2 <parserRx+0x76>
    		uart_state++;
 8000eb2:	4b6e      	ldr	r3, [pc, #440]	; (800106c <parserRx+0x220>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	3301      	adds	r3, #1
 8000eba:	b2da      	uxtb	r2, r3
 8000ebc:	4b6b      	ldr	r3, [pc, #428]	; (800106c <parserRx+0x220>)
 8000ebe:	701a      	strb	r2, [r3, #0]
 8000ec0:	e002      	b.n	8000ec8 <parserRx+0x7c>
    	  }
    	else{
    	 uart_state = uart_h1;
 8000ec2:	4b6a      	ldr	r3, [pc, #424]	; (800106c <parserRx+0x220>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	701a      	strb	r2, [r3, #0]
    	 }
    	return 0;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	e0ca      	b.n	8001062 <parserRx+0x216>
    	break;

    case uart_len:
    	if(checkHeadersComeOnProccess(d)){return 0;break;}
 8000ecc:	68f8      	ldr	r0, [r7, #12]
 8000ece:	f000 f8d7 	bl	8001080 <checkHeadersComeOnProccess>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <parserRx+0x90>
 8000ed8:	2300      	movs	r3, #0
 8000eda:	e0c2      	b.n	8001062 <parserRx+0x216>
    	uart_rx_data.len=d;
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	b2da      	uxtb	r2, r3
 8000ee0:	4b65      	ldr	r3, [pc, #404]	; (8001078 <parserRx+0x22c>)
 8000ee2:	701a      	strb	r2, [r3, #0]
    	uart_state++;
 8000ee4:	4b61      	ldr	r3, [pc, #388]	; (800106c <parserRx+0x220>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	3301      	adds	r3, #1
 8000eec:	b2da      	uxtb	r2, r3
 8000eee:	4b5f      	ldr	r3, [pc, #380]	; (800106c <parserRx+0x220>)
 8000ef0:	701a      	strb	r2, [r3, #0]
    	return 0;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	e0b5      	b.n	8001062 <parserRx+0x216>
    	break;

    case uart_adr:
        if(checkHeadersComeOnProccess(d)){return 0;break;}
 8000ef6:	68f8      	ldr	r0, [r7, #12]
 8000ef8:	f000 f8c2 	bl	8001080 <checkHeadersComeOnProccess>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <parserRx+0xba>
 8000f02:	2300      	movs	r3, #0
 8000f04:	e0ad      	b.n	8001062 <parserRx+0x216>
        uart_rx_data.addr=d;
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	b2da      	uxtb	r2, r3
 8000f0a:	4b5b      	ldr	r3, [pc, #364]	; (8001078 <parserRx+0x22c>)
 8000f0c:	705a      	strb	r2, [r3, #1]
        uart_state++;
 8000f0e:	4b57      	ldr	r3, [pc, #348]	; (800106c <parserRx+0x220>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	3301      	adds	r3, #1
 8000f16:	b2da      	uxtb	r2, r3
 8000f18:	4b54      	ldr	r3, [pc, #336]	; (800106c <parserRx+0x220>)
 8000f1a:	701a      	strb	r2, [r3, #0]

        return 0;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	e0a0      	b.n	8001062 <parserRx+0x216>
        break;
    case uart_cmd:
        if(checkHeadersComeOnProccess(d)){return 0;break;}
 8000f20:	68f8      	ldr	r0, [r7, #12]
 8000f22:	f000 f8ad 	bl	8001080 <checkHeadersComeOnProccess>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <parserRx+0xe4>
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	e098      	b.n	8001062 <parserRx+0x216>
        if(d==crc82 || d==crc83){uart_rx_data.enableCrc=1;}
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	2b82      	cmp	r3, #130	; 0x82
 8000f34:	d002      	beq.n	8000f3c <parserRx+0xf0>
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	2b83      	cmp	r3, #131	; 0x83
 8000f3a:	d103      	bne.n	8000f44 <parserRx+0xf8>
 8000f3c:	4b4e      	ldr	r3, [pc, #312]	; (8001078 <parserRx+0x22c>)
 8000f3e:	2201      	movs	r2, #1
 8000f40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
        uart_rx_data.cmd=d;
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	b2da      	uxtb	r2, r3
 8000f48:	4b4b      	ldr	r3, [pc, #300]	; (8001078 <parserRx+0x22c>)
 8000f4a:	709a      	strb	r2, [r3, #2]
        uart_state++;
 8000f4c:	4b47      	ldr	r3, [pc, #284]	; (800106c <parserRx+0x220>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	3301      	adds	r3, #1
 8000f54:	b2da      	uxtb	r2, r3
 8000f56:	4b45      	ldr	r3, [pc, #276]	; (800106c <parserRx+0x220>)
 8000f58:	701a      	strb	r2, [r3, #0]
        counter=2;
 8000f5a:	4b48      	ldr	r3, [pc, #288]	; (800107c <parserRx+0x230>)
 8000f5c:	2202      	movs	r2, #2
 8000f5e:	701a      	strb	r2, [r3, #0]
        return 0;
 8000f60:	2300      	movs	r3, #0
 8000f62:	e07e      	b.n	8001062 <parserRx+0x216>
        break;

    case uart_data:
        if(checkHeadersComeOnProccess(d)){return 0;break;}
 8000f64:	68f8      	ldr	r0, [r7, #12]
 8000f66:	f000 f88b 	bl	8001080 <checkHeadersComeOnProccess>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <parserRx+0x128>
 8000f70:	2300      	movs	r3, #0
 8000f72:	e076      	b.n	8001062 <parserRx+0x216>
        uart_rx_data.buf[counter-2]=d;
 8000f74:	68fa      	ldr	r2, [r7, #12]
 8000f76:	4b41      	ldr	r3, [pc, #260]	; (800107c <parserRx+0x230>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	3b02      	subs	r3, #2
 8000f7e:	b2d1      	uxtb	r1, r2
 8000f80:	4a3d      	ldr	r2, [pc, #244]	; (8001078 <parserRx+0x22c>)
 8000f82:	4413      	add	r3, r2
 8000f84:	460a      	mov	r2, r1
 8000f86:	70da      	strb	r2, [r3, #3]
        counter++;
 8000f88:	4b3c      	ldr	r3, [pc, #240]	; (800107c <parserRx+0x230>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	3301      	adds	r3, #1
 8000f90:	b2da      	uxtb	r2, r3
 8000f92:	4b3a      	ldr	r3, [pc, #232]	; (800107c <parserRx+0x230>)
 8000f94:	701a      	strb	r2, [r3, #0]

        if(!uart_rx_data.enableCrc && counter==uart_rx_data.len)
 8000f96:	4b38      	ldr	r3, [pc, #224]	; (8001078 <parserRx+0x22c>)
 8000f98:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	f083 0301 	eor.w	r3, r3, #1
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d00f      	beq.n	8000fc8 <parserRx+0x17c>
 8000fa8:	4b33      	ldr	r3, [pc, #204]	; (8001078 <parserRx+0x22c>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	b2da      	uxtb	r2, r3
 8000fae:	4b33      	ldr	r3, [pc, #204]	; (800107c <parserRx+0x230>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d107      	bne.n	8000fc8 <parserRx+0x17c>
        { // crc kontrol pasif ve data tamamlanmış
        	counter=0;
 8000fb8:	4b30      	ldr	r3, [pc, #192]	; (800107c <parserRx+0x230>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	701a      	strb	r2, [r3, #0]
            uart_state=uart_done;
 8000fbe:	4b2b      	ldr	r3, [pc, #172]	; (800106c <parserRx+0x220>)
 8000fc0:	2207      	movs	r2, #7
 8000fc2:	701a      	strb	r2, [r3, #0]
            return 1;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	e04c      	b.n	8001062 <parserRx+0x216>
            break;

        }
        else if(uart_rx_data.enableCrc && counter==(uart_rx_data.len-2))
 8000fc8:	4b2b      	ldr	r3, [pc, #172]	; (8001078 <parserRx+0x22c>)
 8000fca:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d013      	beq.n	8000ffc <parserRx+0x1b0>
 8000fd4:	4b29      	ldr	r3, [pc, #164]	; (800107c <parserRx+0x230>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	461a      	mov	r2, r3
 8000fdc:	4b26      	ldr	r3, [pc, #152]	; (8001078 <parserRx+0x22c>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	3b02      	subs	r3, #2
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d109      	bne.n	8000ffc <parserRx+0x1b0>
        { // crc aktif ve gelecek yeni veri var

        	counter=0;
 8000fe8:	4b24      	ldr	r3, [pc, #144]	; (800107c <parserRx+0x230>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	701a      	strb	r2, [r3, #0]
        	uart_state++;
 8000fee:	4b1f      	ldr	r3, [pc, #124]	; (800106c <parserRx+0x220>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	b2da      	uxtb	r2, r3
 8000ff8:	4b1c      	ldr	r3, [pc, #112]	; (800106c <parserRx+0x220>)
 8000ffa:	701a      	strb	r2, [r3, #0]
        }
        return 0;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	e030      	b.n	8001062 <parserRx+0x216>
        break;

    case uart_chksum:
        if(checkHeadersComeOnProccess(d)){return 0;break;}
 8001000:	68f8      	ldr	r0, [r7, #12]
 8001002:	f000 f83d 	bl	8001080 <checkHeadersComeOnProccess>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <parserRx+0x1c4>
 800100c:	2300      	movs	r3, #0
 800100e:	e028      	b.n	8001062 <parserRx+0x216>
        uint8_t temp =d;
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	72fb      	strb	r3, [r7, #11]
        uart_rx_data.chksum |= temp << (uint8_t)(8*counter++);
 8001014:	7afa      	ldrb	r2, [r7, #11]
 8001016:	4b19      	ldr	r3, [pc, #100]	; (800107c <parserRx+0x230>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	b2db      	uxtb	r3, r3
 800101c:	1c59      	adds	r1, r3, #1
 800101e:	b2c8      	uxtb	r0, r1
 8001020:	4916      	ldr	r1, [pc, #88]	; (800107c <parserRx+0x230>)
 8001022:	7008      	strb	r0, [r1, #0]
 8001024:	00db      	lsls	r3, r3, #3
 8001026:	b2db      	uxtb	r3, r3
 8001028:	fa02 f103 	lsl.w	r1, r2, r3
 800102c:	4b12      	ldr	r3, [pc, #72]	; (8001078 <parserRx+0x22c>)
 800102e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001032:	b29b      	uxth	r3, r3
 8001034:	b21a      	sxth	r2, r3
 8001036:	b20b      	sxth	r3, r1
 8001038:	4313      	orrs	r3, r2
 800103a:	b21b      	sxth	r3, r3
 800103c:	b29a      	uxth	r2, r3
 800103e:	4b0e      	ldr	r3, [pc, #56]	; (8001078 <parserRx+0x22c>)
 8001040:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
        if(counter == uart_chksum_bytes){
 8001044:	4b0d      	ldr	r3, [pc, #52]	; (800107c <parserRx+0x230>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	b2db      	uxtb	r3, r3
 800104a:	2b02      	cmp	r3, #2
 800104c:	d107      	bne.n	800105e <parserRx+0x212>
        	counter=0;
 800104e:	4b0b      	ldr	r3, [pc, #44]	; (800107c <parserRx+0x230>)
 8001050:	2200      	movs	r2, #0
 8001052:	701a      	strb	r2, [r3, #0]
        	uart_state=uart_done;
 8001054:	4b05      	ldr	r3, [pc, #20]	; (800106c <parserRx+0x220>)
 8001056:	2207      	movs	r2, #7
 8001058:	701a      	strb	r2, [r3, #0]
        	return 1;
 800105a:	2301      	movs	r3, #1
 800105c:	e001      	b.n	8001062 <parserRx+0x216>
        	break;
        }
        return 0;
 800105e:	2300      	movs	r3, #0
 8001060:	e7ff      	b.n	8001062 <parserRx+0x216>
    	break;

    }
}
 8001062:	4618      	mov	r0, r3
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	200000d8 	.word	0x200000d8
 8001070:	20000004 	.word	0x20000004
 8001074:	20000005 	.word	0x20000005
 8001078:	200000dc 	.word	0x200000dc
 800107c:	20000122 	.word	0x20000122

08001080 <checkHeadersComeOnProccess>:

bool checkHeadersComeOnProccess(const uint8_t* d) // sakin kafayla tekrardan bak
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]

	if(!fh1 && d==h1)
 8001088:	4b19      	ldr	r3, [pc, #100]	; (80010f0 <checkHeadersComeOnProccess+0x70>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	b2db      	uxtb	r3, r3
 800108e:	f083 0301 	eor.w	r3, r3, #1
 8001092:	b2db      	uxtb	r3, r3
 8001094:	2b00      	cmp	r3, #0
 8001096:	d00a      	beq.n	80010ae <checkHeadersComeOnProccess+0x2e>
 8001098:	4b16      	ldr	r3, [pc, #88]	; (80010f4 <checkHeadersComeOnProccess+0x74>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	461a      	mov	r2, r3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d104      	bne.n	80010ae <checkHeadersComeOnProccess+0x2e>
	{
		fh1=1;
 80010a4:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <checkHeadersComeOnProccess+0x70>)
 80010a6:	2201      	movs	r2, #1
 80010a8:	701a      	strb	r2, [r3, #0]
		return 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	e01b      	b.n	80010e6 <checkHeadersComeOnProccess+0x66>
	}
	else if(fh1&& d==h2)
 80010ae:	4b10      	ldr	r3, [pc, #64]	; (80010f0 <checkHeadersComeOnProccess+0x70>)
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d012      	beq.n	80010de <checkHeadersComeOnProccess+0x5e>
 80010b8:	4b0f      	ldr	r3, [pc, #60]	; (80010f8 <checkHeadersComeOnProccess+0x78>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	461a      	mov	r2, r3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d10c      	bne.n	80010de <checkHeadersComeOnProccess+0x5e>
	{
		uart_state=uart_len;
 80010c4:	4b0d      	ldr	r3, [pc, #52]	; (80010fc <checkHeadersComeOnProccess+0x7c>)
 80010c6:	2202      	movs	r2, #2
 80010c8:	701a      	strb	r2, [r3, #0]
		fh1=0;
 80010ca:	4b09      	ldr	r3, [pc, #36]	; (80010f0 <checkHeadersComeOnProccess+0x70>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	701a      	strb	r2, [r3, #0]
		memset(&uart_rx_data, 0, sizeof(uart_data_t));
 80010d0:	2246      	movs	r2, #70	; 0x46
 80010d2:	2100      	movs	r1, #0
 80010d4:	480a      	ldr	r0, [pc, #40]	; (8001100 <checkHeadersComeOnProccess+0x80>)
 80010d6:	f001 f8a9 	bl	800222c <memset>
		return 1;
 80010da:	2301      	movs	r3, #1
 80010dc:	e003      	b.n	80010e6 <checkHeadersComeOnProccess+0x66>
	}
	else{
		fh1=0;
 80010de:	4b04      	ldr	r3, [pc, #16]	; (80010f0 <checkHeadersComeOnProccess+0x70>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	701a      	strb	r2, [r3, #0]
		return 0;
 80010e4:	2300      	movs	r3, #0
	}

}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20000123 	.word	0x20000123
 80010f4:	20000004 	.word	0x20000004
 80010f8:	20000005 	.word	0x20000005
 80010fc:	200000d8 	.word	0x200000d8
 8001100:	200000dc 	.word	0x200000dc

08001104 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001104:	f7ff fe9c 	bl	8000e40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001108:	480b      	ldr	r0, [pc, #44]	; (8001138 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800110a:	490c      	ldr	r1, [pc, #48]	; (800113c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800110c:	4a0c      	ldr	r2, [pc, #48]	; (8001140 <LoopFillZerobss+0x16>)
  movs r3, #0
 800110e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001110:	e002      	b.n	8001118 <LoopCopyDataInit>

08001112 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001112:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001114:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001116:	3304      	adds	r3, #4

08001118 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001118:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800111a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800111c:	d3f9      	bcc.n	8001112 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800111e:	4a09      	ldr	r2, [pc, #36]	; (8001144 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001120:	4c09      	ldr	r4, [pc, #36]	; (8001148 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001122:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001124:	e001      	b.n	800112a <LoopFillZerobss>

08001126 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001126:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001128:	3204      	adds	r2, #4

0800112a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800112a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800112c:	d3fb      	bcc.n	8001126 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800112e:	f001 f885 	bl	800223c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001132:	f7ff fb01 	bl	8000738 <main>
  bx lr
 8001136:	4770      	bx	lr
  ldr r0, =_sdata
 8001138:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800113c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001140:	080022f4 	.word	0x080022f4
  ldr r2, =_sbss
 8001144:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001148:	20000128 	.word	0x20000128

0800114c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800114c:	e7fe      	b.n	800114c <ADC1_2_IRQHandler>
	...

08001150 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001154:	4b08      	ldr	r3, [pc, #32]	; (8001178 <HAL_Init+0x28>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a07      	ldr	r2, [pc, #28]	; (8001178 <HAL_Init+0x28>)
 800115a:	f043 0310 	orr.w	r3, r3, #16
 800115e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001160:	2003      	movs	r0, #3
 8001162:	f000 f92b 	bl	80013bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001166:	200f      	movs	r0, #15
 8001168:	f000 f808 	bl	800117c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800116c:	f7ff fd20 	bl	8000bb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001170:	2300      	movs	r3, #0
}
 8001172:	4618      	mov	r0, r3
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40022000 	.word	0x40022000

0800117c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001184:	4b12      	ldr	r3, [pc, #72]	; (80011d0 <HAL_InitTick+0x54>)
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	4b12      	ldr	r3, [pc, #72]	; (80011d4 <HAL_InitTick+0x58>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	4619      	mov	r1, r3
 800118e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001192:	fbb3 f3f1 	udiv	r3, r3, r1
 8001196:	fbb2 f3f3 	udiv	r3, r2, r3
 800119a:	4618      	mov	r0, r3
 800119c:	f000 f935 	bl	800140a <HAL_SYSTICK_Config>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e00e      	b.n	80011c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2b0f      	cmp	r3, #15
 80011ae:	d80a      	bhi.n	80011c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011b0:	2200      	movs	r2, #0
 80011b2:	6879      	ldr	r1, [r7, #4]
 80011b4:	f04f 30ff 	mov.w	r0, #4294967295
 80011b8:	f000 f90b 	bl	80013d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011bc:	4a06      	ldr	r2, [pc, #24]	; (80011d8 <HAL_InitTick+0x5c>)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011c2:	2300      	movs	r3, #0
 80011c4:	e000      	b.n	80011c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	20000000 	.word	0x20000000
 80011d4:	2000000c 	.word	0x2000000c
 80011d8:	20000008 	.word	0x20000008

080011dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011e0:	4b05      	ldr	r3, [pc, #20]	; (80011f8 <HAL_IncTick+0x1c>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	461a      	mov	r2, r3
 80011e6:	4b05      	ldr	r3, [pc, #20]	; (80011fc <HAL_IncTick+0x20>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4413      	add	r3, r2
 80011ec:	4a03      	ldr	r2, [pc, #12]	; (80011fc <HAL_IncTick+0x20>)
 80011ee:	6013      	str	r3, [r2, #0]
}
 80011f0:	bf00      	nop
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bc80      	pop	{r7}
 80011f6:	4770      	bx	lr
 80011f8:	2000000c 	.word	0x2000000c
 80011fc:	20000124 	.word	0x20000124

08001200 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  return uwTick;
 8001204:	4b02      	ldr	r3, [pc, #8]	; (8001210 <HAL_GetTick+0x10>)
 8001206:	681b      	ldr	r3, [r3, #0]
}
 8001208:	4618      	mov	r0, r3
 800120a:	46bd      	mov	sp, r7
 800120c:	bc80      	pop	{r7}
 800120e:	4770      	bx	lr
 8001210:	20000124 	.word	0x20000124

08001214 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800121c:	f7ff fff0 	bl	8001200 <HAL_GetTick>
 8001220:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800122c:	d005      	beq.n	800123a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800122e:	4b0a      	ldr	r3, [pc, #40]	; (8001258 <HAL_Delay+0x44>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	461a      	mov	r2, r3
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	4413      	add	r3, r2
 8001238:	60fb      	str	r3, [r7, #12]
  }

 while ((HAL_GetTick() - tickstart) < wait)
 800123a:	bf00      	nop
 800123c:	f7ff ffe0 	bl	8001200 <HAL_GetTick>
 8001240:	4602      	mov	r2, r0
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	68fa      	ldr	r2, [r7, #12]
 8001248:	429a      	cmp	r2, r3
 800124a:	d8f7      	bhi.n	800123c <HAL_Delay+0x28>
  {
  }
}
 800124c:	bf00      	nop
 800124e:	bf00      	nop
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	2000000c 	.word	0x2000000c

0800125c <__NVIC_SetPriorityGrouping>:
{
 800125c:	b480      	push	{r7}
 800125e:	b085      	sub	sp, #20
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	f003 0307 	and.w	r3, r3, #7
 800126a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800126c:	4b0c      	ldr	r3, [pc, #48]	; (80012a0 <__NVIC_SetPriorityGrouping+0x44>)
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001272:	68ba      	ldr	r2, [r7, #8]
 8001274:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001278:	4013      	ands	r3, r2
 800127a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001284:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001288:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800128c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800128e:	4a04      	ldr	r2, [pc, #16]	; (80012a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	60d3      	str	r3, [r2, #12]
}
 8001294:	bf00      	nop
 8001296:	3714      	adds	r7, #20
 8001298:	46bd      	mov	sp, r7
 800129a:	bc80      	pop	{r7}
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	e000ed00 	.word	0xe000ed00

080012a4 <__NVIC_GetPriorityGrouping>:
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012a8:	4b04      	ldr	r3, [pc, #16]	; (80012bc <__NVIC_GetPriorityGrouping+0x18>)
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	0a1b      	lsrs	r3, r3, #8
 80012ae:	f003 0307 	and.w	r3, r3, #7
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bc80      	pop	{r7}
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	e000ed00 	.word	0xe000ed00

080012c0 <__NVIC_SetPriority>:
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	6039      	str	r1, [r7, #0]
 80012ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	db0a      	blt.n	80012ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	b2da      	uxtb	r2, r3
 80012d8:	490c      	ldr	r1, [pc, #48]	; (800130c <__NVIC_SetPriority+0x4c>)
 80012da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012de:	0112      	lsls	r2, r2, #4
 80012e0:	b2d2      	uxtb	r2, r2
 80012e2:	440b      	add	r3, r1
 80012e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80012e8:	e00a      	b.n	8001300 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	b2da      	uxtb	r2, r3
 80012ee:	4908      	ldr	r1, [pc, #32]	; (8001310 <__NVIC_SetPriority+0x50>)
 80012f0:	79fb      	ldrb	r3, [r7, #7]
 80012f2:	f003 030f 	and.w	r3, r3, #15
 80012f6:	3b04      	subs	r3, #4
 80012f8:	0112      	lsls	r2, r2, #4
 80012fa:	b2d2      	uxtb	r2, r2
 80012fc:	440b      	add	r3, r1
 80012fe:	761a      	strb	r2, [r3, #24]
}
 8001300:	bf00      	nop
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	bc80      	pop	{r7}
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	e000e100 	.word	0xe000e100
 8001310:	e000ed00 	.word	0xe000ed00

08001314 <NVIC_EncodePriority>:
{
 8001314:	b480      	push	{r7}
 8001316:	b089      	sub	sp, #36	; 0x24
 8001318:	af00      	add	r7, sp, #0
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	60b9      	str	r1, [r7, #8]
 800131e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	f003 0307 	and.w	r3, r3, #7
 8001326:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	f1c3 0307 	rsb	r3, r3, #7
 800132e:	2b04      	cmp	r3, #4
 8001330:	bf28      	it	cs
 8001332:	2304      	movcs	r3, #4
 8001334:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	3304      	adds	r3, #4
 800133a:	2b06      	cmp	r3, #6
 800133c:	d902      	bls.n	8001344 <NVIC_EncodePriority+0x30>
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	3b03      	subs	r3, #3
 8001342:	e000      	b.n	8001346 <NVIC_EncodePriority+0x32>
 8001344:	2300      	movs	r3, #0
 8001346:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001348:	f04f 32ff 	mov.w	r2, #4294967295
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	43da      	mvns	r2, r3
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	401a      	ands	r2, r3
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800135c:	f04f 31ff 	mov.w	r1, #4294967295
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	fa01 f303 	lsl.w	r3, r1, r3
 8001366:	43d9      	mvns	r1, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800136c:	4313      	orrs	r3, r2
}
 800136e:	4618      	mov	r0, r3
 8001370:	3724      	adds	r7, #36	; 0x24
 8001372:	46bd      	mov	sp, r7
 8001374:	bc80      	pop	{r7}
 8001376:	4770      	bx	lr

08001378 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	3b01      	subs	r3, #1
 8001384:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001388:	d301      	bcc.n	800138e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800138a:	2301      	movs	r3, #1
 800138c:	e00f      	b.n	80013ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800138e:	4a0a      	ldr	r2, [pc, #40]	; (80013b8 <SysTick_Config+0x40>)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	3b01      	subs	r3, #1
 8001394:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001396:	210f      	movs	r1, #15
 8001398:	f04f 30ff 	mov.w	r0, #4294967295
 800139c:	f7ff ff90 	bl	80012c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013a0:	4b05      	ldr	r3, [pc, #20]	; (80013b8 <SysTick_Config+0x40>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013a6:	4b04      	ldr	r3, [pc, #16]	; (80013b8 <SysTick_Config+0x40>)
 80013a8:	2207      	movs	r2, #7
 80013aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013ac:	2300      	movs	r3, #0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	e000e010 	.word	0xe000e010

080013bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f7ff ff49 	bl	800125c <__NVIC_SetPriorityGrouping>
}
 80013ca:	bf00      	nop
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b086      	sub	sp, #24
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	4603      	mov	r3, r0
 80013da:	60b9      	str	r1, [r7, #8]
 80013dc:	607a      	str	r2, [r7, #4]
 80013de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013e0:	2300      	movs	r3, #0
 80013e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013e4:	f7ff ff5e 	bl	80012a4 <__NVIC_GetPriorityGrouping>
 80013e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	68b9      	ldr	r1, [r7, #8]
 80013ee:	6978      	ldr	r0, [r7, #20]
 80013f0:	f7ff ff90 	bl	8001314 <NVIC_EncodePriority>
 80013f4:	4602      	mov	r2, r0
 80013f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013fa:	4611      	mov	r1, r2
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff ff5f 	bl	80012c0 <__NVIC_SetPriority>
}
 8001402:	bf00      	nop
 8001404:	3718      	adds	r7, #24
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}

0800140a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800140a:	b580      	push	{r7, lr}
 800140c:	b082      	sub	sp, #8
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f7ff ffb0 	bl	8001378 <SysTick_Config>
 8001418:	4603      	mov	r3, r0
}
 800141a:	4618      	mov	r0, r3
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
	...

08001424 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d101      	bne.n	8001436 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e272      	b.n	800191c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	2b00      	cmp	r3, #0
 8001440:	f000 8087 	beq.w	8001552 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001444:	4b92      	ldr	r3, [pc, #584]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f003 030c 	and.w	r3, r3, #12
 800144c:	2b04      	cmp	r3, #4
 800144e:	d00c      	beq.n	800146a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001450:	4b8f      	ldr	r3, [pc, #572]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f003 030c 	and.w	r3, r3, #12
 8001458:	2b08      	cmp	r3, #8
 800145a:	d112      	bne.n	8001482 <HAL_RCC_OscConfig+0x5e>
 800145c:	4b8c      	ldr	r3, [pc, #560]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001464:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001468:	d10b      	bne.n	8001482 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800146a:	4b89      	ldr	r3, [pc, #548]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d06c      	beq.n	8001550 <HAL_RCC_OscConfig+0x12c>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d168      	bne.n	8001550 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e24c      	b.n	800191c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800148a:	d106      	bne.n	800149a <HAL_RCC_OscConfig+0x76>
 800148c:	4b80      	ldr	r3, [pc, #512]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a7f      	ldr	r2, [pc, #508]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 8001492:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001496:	6013      	str	r3, [r2, #0]
 8001498:	e02e      	b.n	80014f8 <HAL_RCC_OscConfig+0xd4>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d10c      	bne.n	80014bc <HAL_RCC_OscConfig+0x98>
 80014a2:	4b7b      	ldr	r3, [pc, #492]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a7a      	ldr	r2, [pc, #488]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 80014a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014ac:	6013      	str	r3, [r2, #0]
 80014ae:	4b78      	ldr	r3, [pc, #480]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a77      	ldr	r2, [pc, #476]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 80014b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014b8:	6013      	str	r3, [r2, #0]
 80014ba:	e01d      	b.n	80014f8 <HAL_RCC_OscConfig+0xd4>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014c4:	d10c      	bne.n	80014e0 <HAL_RCC_OscConfig+0xbc>
 80014c6:	4b72      	ldr	r3, [pc, #456]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a71      	ldr	r2, [pc, #452]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 80014cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014d0:	6013      	str	r3, [r2, #0]
 80014d2:	4b6f      	ldr	r3, [pc, #444]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a6e      	ldr	r2, [pc, #440]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 80014d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014dc:	6013      	str	r3, [r2, #0]
 80014de:	e00b      	b.n	80014f8 <HAL_RCC_OscConfig+0xd4>
 80014e0:	4b6b      	ldr	r3, [pc, #428]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a6a      	ldr	r2, [pc, #424]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 80014e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014ea:	6013      	str	r3, [r2, #0]
 80014ec:	4b68      	ldr	r3, [pc, #416]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a67      	ldr	r2, [pc, #412]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 80014f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014f6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d013      	beq.n	8001528 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001500:	f7ff fe7e 	bl	8001200 <HAL_GetTick>
 8001504:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001506:	e008      	b.n	800151a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001508:	f7ff fe7a 	bl	8001200 <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	2b64      	cmp	r3, #100	; 0x64
 8001514:	d901      	bls.n	800151a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e200      	b.n	800191c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800151a:	4b5d      	ldr	r3, [pc, #372]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d0f0      	beq.n	8001508 <HAL_RCC_OscConfig+0xe4>
 8001526:	e014      	b.n	8001552 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001528:	f7ff fe6a 	bl	8001200 <HAL_GetTick>
 800152c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800152e:	e008      	b.n	8001542 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001530:	f7ff fe66 	bl	8001200 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	2b64      	cmp	r3, #100	; 0x64
 800153c:	d901      	bls.n	8001542 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e1ec      	b.n	800191c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001542:	4b53      	ldr	r3, [pc, #332]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d1f0      	bne.n	8001530 <HAL_RCC_OscConfig+0x10c>
 800154e:	e000      	b.n	8001552 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001550:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0302 	and.w	r3, r3, #2
 800155a:	2b00      	cmp	r3, #0
 800155c:	d063      	beq.n	8001626 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800155e:	4b4c      	ldr	r3, [pc, #304]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f003 030c 	and.w	r3, r3, #12
 8001566:	2b00      	cmp	r3, #0
 8001568:	d00b      	beq.n	8001582 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800156a:	4b49      	ldr	r3, [pc, #292]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f003 030c 	and.w	r3, r3, #12
 8001572:	2b08      	cmp	r3, #8
 8001574:	d11c      	bne.n	80015b0 <HAL_RCC_OscConfig+0x18c>
 8001576:	4b46      	ldr	r3, [pc, #280]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d116      	bne.n	80015b0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001582:	4b43      	ldr	r3, [pc, #268]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0302 	and.w	r3, r3, #2
 800158a:	2b00      	cmp	r3, #0
 800158c:	d005      	beq.n	800159a <HAL_RCC_OscConfig+0x176>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	691b      	ldr	r3, [r3, #16]
 8001592:	2b01      	cmp	r3, #1
 8001594:	d001      	beq.n	800159a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e1c0      	b.n	800191c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800159a:	4b3d      	ldr	r3, [pc, #244]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	695b      	ldr	r3, [r3, #20]
 80015a6:	00db      	lsls	r3, r3, #3
 80015a8:	4939      	ldr	r1, [pc, #228]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 80015aa:	4313      	orrs	r3, r2
 80015ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ae:	e03a      	b.n	8001626 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	691b      	ldr	r3, [r3, #16]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d020      	beq.n	80015fa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015b8:	4b36      	ldr	r3, [pc, #216]	; (8001694 <HAL_RCC_OscConfig+0x270>)
 80015ba:	2201      	movs	r2, #1
 80015bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015be:	f7ff fe1f 	bl	8001200 <HAL_GetTick>
 80015c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015c4:	e008      	b.n	80015d8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015c6:	f7ff fe1b 	bl	8001200 <HAL_GetTick>
 80015ca:	4602      	mov	r2, r0
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d901      	bls.n	80015d8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e1a1      	b.n	800191c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015d8:	4b2d      	ldr	r3, [pc, #180]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0302 	and.w	r3, r3, #2
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d0f0      	beq.n	80015c6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015e4:	4b2a      	ldr	r3, [pc, #168]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	695b      	ldr	r3, [r3, #20]
 80015f0:	00db      	lsls	r3, r3, #3
 80015f2:	4927      	ldr	r1, [pc, #156]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 80015f4:	4313      	orrs	r3, r2
 80015f6:	600b      	str	r3, [r1, #0]
 80015f8:	e015      	b.n	8001626 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015fa:	4b26      	ldr	r3, [pc, #152]	; (8001694 <HAL_RCC_OscConfig+0x270>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001600:	f7ff fdfe 	bl	8001200 <HAL_GetTick>
 8001604:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001606:	e008      	b.n	800161a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001608:	f7ff fdfa 	bl	8001200 <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	2b02      	cmp	r3, #2
 8001614:	d901      	bls.n	800161a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e180      	b.n	800191c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800161a:	4b1d      	ldr	r3, [pc, #116]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	2b00      	cmp	r3, #0
 8001624:	d1f0      	bne.n	8001608 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0308 	and.w	r3, r3, #8
 800162e:	2b00      	cmp	r3, #0
 8001630:	d03a      	beq.n	80016a8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	699b      	ldr	r3, [r3, #24]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d019      	beq.n	800166e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800163a:	4b17      	ldr	r3, [pc, #92]	; (8001698 <HAL_RCC_OscConfig+0x274>)
 800163c:	2201      	movs	r2, #1
 800163e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001640:	f7ff fdde 	bl	8001200 <HAL_GetTick>
 8001644:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001646:	e008      	b.n	800165a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001648:	f7ff fdda 	bl	8001200 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b02      	cmp	r3, #2
 8001654:	d901      	bls.n	800165a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e160      	b.n	800191c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800165a:	4b0d      	ldr	r3, [pc, #52]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 800165c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	2b00      	cmp	r3, #0
 8001664:	d0f0      	beq.n	8001648 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001666:	2001      	movs	r0, #1
 8001668:	f000 fa9c 	bl	8001ba4 <RCC_Delay>
 800166c:	e01c      	b.n	80016a8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800166e:	4b0a      	ldr	r3, [pc, #40]	; (8001698 <HAL_RCC_OscConfig+0x274>)
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001674:	f7ff fdc4 	bl	8001200 <HAL_GetTick>
 8001678:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800167a:	e00f      	b.n	800169c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800167c:	f7ff fdc0 	bl	8001200 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b02      	cmp	r3, #2
 8001688:	d908      	bls.n	800169c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e146      	b.n	800191c <HAL_RCC_OscConfig+0x4f8>
 800168e:	bf00      	nop
 8001690:	40021000 	.word	0x40021000
 8001694:	42420000 	.word	0x42420000
 8001698:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800169c:	4b92      	ldr	r3, [pc, #584]	; (80018e8 <HAL_RCC_OscConfig+0x4c4>)
 800169e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a0:	f003 0302 	and.w	r3, r3, #2
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d1e9      	bne.n	800167c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0304 	and.w	r3, r3, #4
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	f000 80a6 	beq.w	8001802 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016b6:	2300      	movs	r3, #0
 80016b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016ba:	4b8b      	ldr	r3, [pc, #556]	; (80018e8 <HAL_RCC_OscConfig+0x4c4>)
 80016bc:	69db      	ldr	r3, [r3, #28]
 80016be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d10d      	bne.n	80016e2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016c6:	4b88      	ldr	r3, [pc, #544]	; (80018e8 <HAL_RCC_OscConfig+0x4c4>)
 80016c8:	69db      	ldr	r3, [r3, #28]
 80016ca:	4a87      	ldr	r2, [pc, #540]	; (80018e8 <HAL_RCC_OscConfig+0x4c4>)
 80016cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016d0:	61d3      	str	r3, [r2, #28]
 80016d2:	4b85      	ldr	r3, [pc, #532]	; (80018e8 <HAL_RCC_OscConfig+0x4c4>)
 80016d4:	69db      	ldr	r3, [r3, #28]
 80016d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016da:	60bb      	str	r3, [r7, #8]
 80016dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016de:	2301      	movs	r3, #1
 80016e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016e2:	4b82      	ldr	r3, [pc, #520]	; (80018ec <HAL_RCC_OscConfig+0x4c8>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d118      	bne.n	8001720 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016ee:	4b7f      	ldr	r3, [pc, #508]	; (80018ec <HAL_RCC_OscConfig+0x4c8>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a7e      	ldr	r2, [pc, #504]	; (80018ec <HAL_RCC_OscConfig+0x4c8>)
 80016f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016fa:	f7ff fd81 	bl	8001200 <HAL_GetTick>
 80016fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001700:	e008      	b.n	8001714 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001702:	f7ff fd7d 	bl	8001200 <HAL_GetTick>
 8001706:	4602      	mov	r2, r0
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	2b64      	cmp	r3, #100	; 0x64
 800170e:	d901      	bls.n	8001714 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001710:	2303      	movs	r3, #3
 8001712:	e103      	b.n	800191c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001714:	4b75      	ldr	r3, [pc, #468]	; (80018ec <HAL_RCC_OscConfig+0x4c8>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800171c:	2b00      	cmp	r3, #0
 800171e:	d0f0      	beq.n	8001702 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	2b01      	cmp	r3, #1
 8001726:	d106      	bne.n	8001736 <HAL_RCC_OscConfig+0x312>
 8001728:	4b6f      	ldr	r3, [pc, #444]	; (80018e8 <HAL_RCC_OscConfig+0x4c4>)
 800172a:	6a1b      	ldr	r3, [r3, #32]
 800172c:	4a6e      	ldr	r2, [pc, #440]	; (80018e8 <HAL_RCC_OscConfig+0x4c4>)
 800172e:	f043 0301 	orr.w	r3, r3, #1
 8001732:	6213      	str	r3, [r2, #32]
 8001734:	e02d      	b.n	8001792 <HAL_RCC_OscConfig+0x36e>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	68db      	ldr	r3, [r3, #12]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d10c      	bne.n	8001758 <HAL_RCC_OscConfig+0x334>
 800173e:	4b6a      	ldr	r3, [pc, #424]	; (80018e8 <HAL_RCC_OscConfig+0x4c4>)
 8001740:	6a1b      	ldr	r3, [r3, #32]
 8001742:	4a69      	ldr	r2, [pc, #420]	; (80018e8 <HAL_RCC_OscConfig+0x4c4>)
 8001744:	f023 0301 	bic.w	r3, r3, #1
 8001748:	6213      	str	r3, [r2, #32]
 800174a:	4b67      	ldr	r3, [pc, #412]	; (80018e8 <HAL_RCC_OscConfig+0x4c4>)
 800174c:	6a1b      	ldr	r3, [r3, #32]
 800174e:	4a66      	ldr	r2, [pc, #408]	; (80018e8 <HAL_RCC_OscConfig+0x4c4>)
 8001750:	f023 0304 	bic.w	r3, r3, #4
 8001754:	6213      	str	r3, [r2, #32]
 8001756:	e01c      	b.n	8001792 <HAL_RCC_OscConfig+0x36e>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	2b05      	cmp	r3, #5
 800175e:	d10c      	bne.n	800177a <HAL_RCC_OscConfig+0x356>
 8001760:	4b61      	ldr	r3, [pc, #388]	; (80018e8 <HAL_RCC_OscConfig+0x4c4>)
 8001762:	6a1b      	ldr	r3, [r3, #32]
 8001764:	4a60      	ldr	r2, [pc, #384]	; (80018e8 <HAL_RCC_OscConfig+0x4c4>)
 8001766:	f043 0304 	orr.w	r3, r3, #4
 800176a:	6213      	str	r3, [r2, #32]
 800176c:	4b5e      	ldr	r3, [pc, #376]	; (80018e8 <HAL_RCC_OscConfig+0x4c4>)
 800176e:	6a1b      	ldr	r3, [r3, #32]
 8001770:	4a5d      	ldr	r2, [pc, #372]	; (80018e8 <HAL_RCC_OscConfig+0x4c4>)
 8001772:	f043 0301 	orr.w	r3, r3, #1
 8001776:	6213      	str	r3, [r2, #32]
 8001778:	e00b      	b.n	8001792 <HAL_RCC_OscConfig+0x36e>
 800177a:	4b5b      	ldr	r3, [pc, #364]	; (80018e8 <HAL_RCC_OscConfig+0x4c4>)
 800177c:	6a1b      	ldr	r3, [r3, #32]
 800177e:	4a5a      	ldr	r2, [pc, #360]	; (80018e8 <HAL_RCC_OscConfig+0x4c4>)
 8001780:	f023 0301 	bic.w	r3, r3, #1
 8001784:	6213      	str	r3, [r2, #32]
 8001786:	4b58      	ldr	r3, [pc, #352]	; (80018e8 <HAL_RCC_OscConfig+0x4c4>)
 8001788:	6a1b      	ldr	r3, [r3, #32]
 800178a:	4a57      	ldr	r2, [pc, #348]	; (80018e8 <HAL_RCC_OscConfig+0x4c4>)
 800178c:	f023 0304 	bic.w	r3, r3, #4
 8001790:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	68db      	ldr	r3, [r3, #12]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d015      	beq.n	80017c6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800179a:	f7ff fd31 	bl	8001200 <HAL_GetTick>
 800179e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017a0:	e00a      	b.n	80017b8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017a2:	f7ff fd2d 	bl	8001200 <HAL_GetTick>
 80017a6:	4602      	mov	r2, r0
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d901      	bls.n	80017b8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80017b4:	2303      	movs	r3, #3
 80017b6:	e0b1      	b.n	800191c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017b8:	4b4b      	ldr	r3, [pc, #300]	; (80018e8 <HAL_RCC_OscConfig+0x4c4>)
 80017ba:	6a1b      	ldr	r3, [r3, #32]
 80017bc:	f003 0302 	and.w	r3, r3, #2
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d0ee      	beq.n	80017a2 <HAL_RCC_OscConfig+0x37e>
 80017c4:	e014      	b.n	80017f0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017c6:	f7ff fd1b 	bl	8001200 <HAL_GetTick>
 80017ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017cc:	e00a      	b.n	80017e4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017ce:	f7ff fd17 	bl	8001200 <HAL_GetTick>
 80017d2:	4602      	mov	r2, r0
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80017dc:	4293      	cmp	r3, r2
 80017de:	d901      	bls.n	80017e4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80017e0:	2303      	movs	r3, #3
 80017e2:	e09b      	b.n	800191c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017e4:	4b40      	ldr	r3, [pc, #256]	; (80018e8 <HAL_RCC_OscConfig+0x4c4>)
 80017e6:	6a1b      	ldr	r3, [r3, #32]
 80017e8:	f003 0302 	and.w	r3, r3, #2
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d1ee      	bne.n	80017ce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80017f0:	7dfb      	ldrb	r3, [r7, #23]
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d105      	bne.n	8001802 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017f6:	4b3c      	ldr	r3, [pc, #240]	; (80018e8 <HAL_RCC_OscConfig+0x4c4>)
 80017f8:	69db      	ldr	r3, [r3, #28]
 80017fa:	4a3b      	ldr	r2, [pc, #236]	; (80018e8 <HAL_RCC_OscConfig+0x4c4>)
 80017fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001800:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	69db      	ldr	r3, [r3, #28]
 8001806:	2b00      	cmp	r3, #0
 8001808:	f000 8087 	beq.w	800191a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800180c:	4b36      	ldr	r3, [pc, #216]	; (80018e8 <HAL_RCC_OscConfig+0x4c4>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f003 030c 	and.w	r3, r3, #12
 8001814:	2b08      	cmp	r3, #8
 8001816:	d061      	beq.n	80018dc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	69db      	ldr	r3, [r3, #28]
 800181c:	2b02      	cmp	r3, #2
 800181e:	d146      	bne.n	80018ae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001820:	4b33      	ldr	r3, [pc, #204]	; (80018f0 <HAL_RCC_OscConfig+0x4cc>)
 8001822:	2200      	movs	r2, #0
 8001824:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001826:	f7ff fceb 	bl	8001200 <HAL_GetTick>
 800182a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800182c:	e008      	b.n	8001840 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800182e:	f7ff fce7 	bl	8001200 <HAL_GetTick>
 8001832:	4602      	mov	r2, r0
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	2b02      	cmp	r3, #2
 800183a:	d901      	bls.n	8001840 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	e06d      	b.n	800191c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001840:	4b29      	ldr	r3, [pc, #164]	; (80018e8 <HAL_RCC_OscConfig+0x4c4>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d1f0      	bne.n	800182e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6a1b      	ldr	r3, [r3, #32]
 8001850:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001854:	d108      	bne.n	8001868 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001856:	4b24      	ldr	r3, [pc, #144]	; (80018e8 <HAL_RCC_OscConfig+0x4c4>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	4921      	ldr	r1, [pc, #132]	; (80018e8 <HAL_RCC_OscConfig+0x4c4>)
 8001864:	4313      	orrs	r3, r2
 8001866:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001868:	4b1f      	ldr	r3, [pc, #124]	; (80018e8 <HAL_RCC_OscConfig+0x4c4>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6a19      	ldr	r1, [r3, #32]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001878:	430b      	orrs	r3, r1
 800187a:	491b      	ldr	r1, [pc, #108]	; (80018e8 <HAL_RCC_OscConfig+0x4c4>)
 800187c:	4313      	orrs	r3, r2
 800187e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001880:	4b1b      	ldr	r3, [pc, #108]	; (80018f0 <HAL_RCC_OscConfig+0x4cc>)
 8001882:	2201      	movs	r2, #1
 8001884:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001886:	f7ff fcbb 	bl	8001200 <HAL_GetTick>
 800188a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800188c:	e008      	b.n	80018a0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800188e:	f7ff fcb7 	bl	8001200 <HAL_GetTick>
 8001892:	4602      	mov	r2, r0
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	2b02      	cmp	r3, #2
 800189a:	d901      	bls.n	80018a0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800189c:	2303      	movs	r3, #3
 800189e:	e03d      	b.n	800191c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018a0:	4b11      	ldr	r3, [pc, #68]	; (80018e8 <HAL_RCC_OscConfig+0x4c4>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d0f0      	beq.n	800188e <HAL_RCC_OscConfig+0x46a>
 80018ac:	e035      	b.n	800191a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ae:	4b10      	ldr	r3, [pc, #64]	; (80018f0 <HAL_RCC_OscConfig+0x4cc>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b4:	f7ff fca4 	bl	8001200 <HAL_GetTick>
 80018b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018ba:	e008      	b.n	80018ce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018bc:	f7ff fca0 	bl	8001200 <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e026      	b.n	800191c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018ce:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <HAL_RCC_OscConfig+0x4c4>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d1f0      	bne.n	80018bc <HAL_RCC_OscConfig+0x498>
 80018da:	e01e      	b.n	800191a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	69db      	ldr	r3, [r3, #28]
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d107      	bne.n	80018f4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	e019      	b.n	800191c <HAL_RCC_OscConfig+0x4f8>
 80018e8:	40021000 	.word	0x40021000
 80018ec:	40007000 	.word	0x40007000
 80018f0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80018f4:	4b0b      	ldr	r3, [pc, #44]	; (8001924 <HAL_RCC_OscConfig+0x500>)
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6a1b      	ldr	r3, [r3, #32]
 8001904:	429a      	cmp	r2, r3
 8001906:	d106      	bne.n	8001916 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001912:	429a      	cmp	r2, r3
 8001914:	d001      	beq.n	800191a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e000      	b.n	800191c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800191a:	2300      	movs	r3, #0
}
 800191c:	4618      	mov	r0, r3
 800191e:	3718      	adds	r7, #24
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	40021000 	.word	0x40021000

08001928 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d101      	bne.n	800193c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e0d0      	b.n	8001ade <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800193c:	4b6a      	ldr	r3, [pc, #424]	; (8001ae8 <HAL_RCC_ClockConfig+0x1c0>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0307 	and.w	r3, r3, #7
 8001944:	683a      	ldr	r2, [r7, #0]
 8001946:	429a      	cmp	r2, r3
 8001948:	d910      	bls.n	800196c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800194a:	4b67      	ldr	r3, [pc, #412]	; (8001ae8 <HAL_RCC_ClockConfig+0x1c0>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f023 0207 	bic.w	r2, r3, #7
 8001952:	4965      	ldr	r1, [pc, #404]	; (8001ae8 <HAL_RCC_ClockConfig+0x1c0>)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	4313      	orrs	r3, r2
 8001958:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800195a:	4b63      	ldr	r3, [pc, #396]	; (8001ae8 <HAL_RCC_ClockConfig+0x1c0>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0307 	and.w	r3, r3, #7
 8001962:	683a      	ldr	r2, [r7, #0]
 8001964:	429a      	cmp	r2, r3
 8001966:	d001      	beq.n	800196c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e0b8      	b.n	8001ade <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0302 	and.w	r3, r3, #2
 8001974:	2b00      	cmp	r3, #0
 8001976:	d020      	beq.n	80019ba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0304 	and.w	r3, r3, #4
 8001980:	2b00      	cmp	r3, #0
 8001982:	d005      	beq.n	8001990 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001984:	4b59      	ldr	r3, [pc, #356]	; (8001aec <HAL_RCC_ClockConfig+0x1c4>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	4a58      	ldr	r2, [pc, #352]	; (8001aec <HAL_RCC_ClockConfig+0x1c4>)
 800198a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800198e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0308 	and.w	r3, r3, #8
 8001998:	2b00      	cmp	r3, #0
 800199a:	d005      	beq.n	80019a8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800199c:	4b53      	ldr	r3, [pc, #332]	; (8001aec <HAL_RCC_ClockConfig+0x1c4>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	4a52      	ldr	r2, [pc, #328]	; (8001aec <HAL_RCC_ClockConfig+0x1c4>)
 80019a2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80019a6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019a8:	4b50      	ldr	r3, [pc, #320]	; (8001aec <HAL_RCC_ClockConfig+0x1c4>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	494d      	ldr	r1, [pc, #308]	; (8001aec <HAL_RCC_ClockConfig+0x1c4>)
 80019b6:	4313      	orrs	r3, r2
 80019b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d040      	beq.n	8001a48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d107      	bne.n	80019de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ce:	4b47      	ldr	r3, [pc, #284]	; (8001aec <HAL_RCC_ClockConfig+0x1c4>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d115      	bne.n	8001a06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e07f      	b.n	8001ade <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d107      	bne.n	80019f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019e6:	4b41      	ldr	r3, [pc, #260]	; (8001aec <HAL_RCC_ClockConfig+0x1c4>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d109      	bne.n	8001a06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e073      	b.n	8001ade <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019f6:	4b3d      	ldr	r3, [pc, #244]	; (8001aec <HAL_RCC_ClockConfig+0x1c4>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d101      	bne.n	8001a06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e06b      	b.n	8001ade <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a06:	4b39      	ldr	r3, [pc, #228]	; (8001aec <HAL_RCC_ClockConfig+0x1c4>)
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f023 0203 	bic.w	r2, r3, #3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	4936      	ldr	r1, [pc, #216]	; (8001aec <HAL_RCC_ClockConfig+0x1c4>)
 8001a14:	4313      	orrs	r3, r2
 8001a16:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a18:	f7ff fbf2 	bl	8001200 <HAL_GetTick>
 8001a1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a1e:	e00a      	b.n	8001a36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a20:	f7ff fbee 	bl	8001200 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e053      	b.n	8001ade <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a36:	4b2d      	ldr	r3, [pc, #180]	; (8001aec <HAL_RCC_ClockConfig+0x1c4>)
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f003 020c 	and.w	r2, r3, #12
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d1eb      	bne.n	8001a20 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a48:	4b27      	ldr	r3, [pc, #156]	; (8001ae8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0307 	and.w	r3, r3, #7
 8001a50:	683a      	ldr	r2, [r7, #0]
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d210      	bcs.n	8001a78 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a56:	4b24      	ldr	r3, [pc, #144]	; (8001ae8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f023 0207 	bic.w	r2, r3, #7
 8001a5e:	4922      	ldr	r1, [pc, #136]	; (8001ae8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a66:	4b20      	ldr	r3, [pc, #128]	; (8001ae8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0307 	and.w	r3, r3, #7
 8001a6e:	683a      	ldr	r2, [r7, #0]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d001      	beq.n	8001a78 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e032      	b.n	8001ade <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0304 	and.w	r3, r3, #4
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d008      	beq.n	8001a96 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a84:	4b19      	ldr	r3, [pc, #100]	; (8001aec <HAL_RCC_ClockConfig+0x1c4>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	4916      	ldr	r1, [pc, #88]	; (8001aec <HAL_RCC_ClockConfig+0x1c4>)
 8001a92:	4313      	orrs	r3, r2
 8001a94:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0308 	and.w	r3, r3, #8
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d009      	beq.n	8001ab6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001aa2:	4b12      	ldr	r3, [pc, #72]	; (8001aec <HAL_RCC_ClockConfig+0x1c4>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	691b      	ldr	r3, [r3, #16]
 8001aae:	00db      	lsls	r3, r3, #3
 8001ab0:	490e      	ldr	r1, [pc, #56]	; (8001aec <HAL_RCC_ClockConfig+0x1c4>)
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ab6:	f000 f821 	bl	8001afc <HAL_RCC_GetSysClockFreq>
 8001aba:	4602      	mov	r2, r0
 8001abc:	4b0b      	ldr	r3, [pc, #44]	; (8001aec <HAL_RCC_ClockConfig+0x1c4>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	091b      	lsrs	r3, r3, #4
 8001ac2:	f003 030f 	and.w	r3, r3, #15
 8001ac6:	490a      	ldr	r1, [pc, #40]	; (8001af0 <HAL_RCC_ClockConfig+0x1c8>)
 8001ac8:	5ccb      	ldrb	r3, [r1, r3]
 8001aca:	fa22 f303 	lsr.w	r3, r2, r3
 8001ace:	4a09      	ldr	r2, [pc, #36]	; (8001af4 <HAL_RCC_ClockConfig+0x1cc>)
 8001ad0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ad2:	4b09      	ldr	r3, [pc, #36]	; (8001af8 <HAL_RCC_ClockConfig+0x1d0>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7ff fb50 	bl	800117c <HAL_InitTick>

  return HAL_OK;
 8001adc:	2300      	movs	r3, #0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3710      	adds	r7, #16
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	40022000 	.word	0x40022000
 8001aec:	40021000 	.word	0x40021000
 8001af0:	080022c0 	.word	0x080022c0
 8001af4:	20000000 	.word	0x20000000
 8001af8:	20000008 	.word	0x20000008

08001afc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b087      	sub	sp, #28
 8001b00:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b02:	2300      	movs	r3, #0
 8001b04:	60fb      	str	r3, [r7, #12]
 8001b06:	2300      	movs	r3, #0
 8001b08:	60bb      	str	r3, [r7, #8]
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	617b      	str	r3, [r7, #20]
 8001b0e:	2300      	movs	r3, #0
 8001b10:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001b12:	2300      	movs	r3, #0
 8001b14:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b16:	4b1e      	ldr	r3, [pc, #120]	; (8001b90 <HAL_RCC_GetSysClockFreq+0x94>)
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f003 030c 	and.w	r3, r3, #12
 8001b22:	2b04      	cmp	r3, #4
 8001b24:	d002      	beq.n	8001b2c <HAL_RCC_GetSysClockFreq+0x30>
 8001b26:	2b08      	cmp	r3, #8
 8001b28:	d003      	beq.n	8001b32 <HAL_RCC_GetSysClockFreq+0x36>
 8001b2a:	e027      	b.n	8001b7c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b2c:	4b19      	ldr	r3, [pc, #100]	; (8001b94 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b2e:	613b      	str	r3, [r7, #16]
      break;
 8001b30:	e027      	b.n	8001b82 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	0c9b      	lsrs	r3, r3, #18
 8001b36:	f003 030f 	and.w	r3, r3, #15
 8001b3a:	4a17      	ldr	r2, [pc, #92]	; (8001b98 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001b3c:	5cd3      	ldrb	r3, [r2, r3]
 8001b3e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d010      	beq.n	8001b6c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b4a:	4b11      	ldr	r3, [pc, #68]	; (8001b90 <HAL_RCC_GetSysClockFreq+0x94>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	0c5b      	lsrs	r3, r3, #17
 8001b50:	f003 0301 	and.w	r3, r3, #1
 8001b54:	4a11      	ldr	r2, [pc, #68]	; (8001b9c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001b56:	5cd3      	ldrb	r3, [r2, r3]
 8001b58:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4a0d      	ldr	r2, [pc, #52]	; (8001b94 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b5e:	fb03 f202 	mul.w	r2, r3, r2
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b68:	617b      	str	r3, [r7, #20]
 8001b6a:	e004      	b.n	8001b76 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	4a0c      	ldr	r2, [pc, #48]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001b70:	fb02 f303 	mul.w	r3, r2, r3
 8001b74:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	613b      	str	r3, [r7, #16]
      break;
 8001b7a:	e002      	b.n	8001b82 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b7c:	4b05      	ldr	r3, [pc, #20]	; (8001b94 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b7e:	613b      	str	r3, [r7, #16]
      break;
 8001b80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b82:	693b      	ldr	r3, [r7, #16]
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	371c      	adds	r7, #28
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bc80      	pop	{r7}
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	40021000 	.word	0x40021000
 8001b94:	007a1200 	.word	0x007a1200
 8001b98:	080022d8 	.word	0x080022d8
 8001b9c:	080022e8 	.word	0x080022e8
 8001ba0:	003d0900 	.word	0x003d0900

08001ba4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b085      	sub	sp, #20
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001bac:	4b0a      	ldr	r3, [pc, #40]	; (8001bd8 <RCC_Delay+0x34>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a0a      	ldr	r2, [pc, #40]	; (8001bdc <RCC_Delay+0x38>)
 8001bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8001bb6:	0a5b      	lsrs	r3, r3, #9
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	fb02 f303 	mul.w	r3, r2, r3
 8001bbe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001bc0:	bf00      	nop
  }
  while (Delay --);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	1e5a      	subs	r2, r3, #1
 8001bc6:	60fa      	str	r2, [r7, #12]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d1f9      	bne.n	8001bc0 <RCC_Delay+0x1c>
}
 8001bcc:	bf00      	nop
 8001bce:	bf00      	nop
 8001bd0:	3714      	adds	r7, #20
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bc80      	pop	{r7}
 8001bd6:	4770      	bx	lr
 8001bd8:	20000000 	.word	0x20000000
 8001bdc:	10624dd3 	.word	0x10624dd3

08001be0 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_OUTPUT
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8001be0:	b490      	push	{r4, r7}
 8001be2:	b088      	sub	sp, #32
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	461a      	mov	r2, r3
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	0e1b      	lsrs	r3, r3, #24
 8001bf4:	4413      	add	r3, r2
 8001bf6:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8001bf8:	6822      	ldr	r2, [r4, #0]
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	fa93 f3a3 	rbit	r3, r3
 8001c04:	613b      	str	r3, [r7, #16]
  return result;
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	fab3 f383 	clz	r3, r3
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	210f      	movs	r1, #15
 8001c12:	fa01 f303 	lsl.w	r3, r1, r3
 8001c16:	43db      	mvns	r3, r3
 8001c18:	401a      	ands	r2, r3
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	fa93 f3a3 	rbit	r3, r3
 8001c24:	61bb      	str	r3, [r7, #24]
  return result;
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	fab3 f383 	clz	r3, r3
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	6879      	ldr	r1, [r7, #4]
 8001c32:	fa01 f303 	lsl.w	r3, r1, r3
 8001c36:	4313      	orrs	r3, r2
 8001c38:	6023      	str	r3, [r4, #0]
}
 8001c3a:	bf00      	nop
 8001c3c:	3720      	adds	r7, #32
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bc90      	pop	{r4, r7}
 8001c42:	4770      	bx	lr

08001c44 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8001c44:	b490      	push	{r4, r7}
 8001c46:	b088      	sub	sp, #32
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	60b9      	str	r1, [r7, #8]
 8001c4e:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	461a      	mov	r2, r3
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	0e1b      	lsrs	r3, r3, #24
 8001c58:	4413      	add	r3, r2
 8001c5a:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8001c5c:	6822      	ldr	r2, [r4, #0]
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	fa93 f3a3 	rbit	r3, r3
 8001c68:	613b      	str	r3, [r7, #16]
  return result;
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	fab3 f383 	clz	r3, r3
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	2103      	movs	r1, #3
 8001c76:	fa01 f303 	lsl.w	r3, r1, r3
 8001c7a:	43db      	mvns	r3, r3
 8001c7c:	401a      	ands	r2, r3
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	fa93 f3a3 	rbit	r3, r3
 8001c88:	61bb      	str	r3, [r7, #24]
  return result;
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	fab3 f383 	clz	r3, r3
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	6879      	ldr	r1, [r7, #4]
 8001c96:	fa01 f303 	lsl.w	r3, r1, r3
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	6023      	str	r3, [r4, #0]
             (Speed << (POSITION_VAL(Pin) * 4U)));
}
 8001c9e:	bf00      	nop
 8001ca0:	3720      	adds	r7, #32
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bc90      	pop	{r4, r7}
 8001ca6:	4770      	bx	lr

08001ca8 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t OutputType)
{
 8001ca8:	b490      	push	{r4, r7}
 8001caa:	b088      	sub	sp, #32
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	60b9      	str	r1, [r7, #8]
 8001cb2:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	0e1b      	lsrs	r3, r3, #24
 8001cbc:	4413      	add	r3, r2
 8001cbe:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8001cc0:	6822      	ldr	r2, [r4, #0]
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	fa93 f3a3 	rbit	r3, r3
 8001ccc:	613b      	str	r3, [r7, #16]
  return result;
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	fab3 f383 	clz	r3, r3
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	2104      	movs	r1, #4
 8001cda:	fa01 f303 	lsl.w	r3, r1, r3
 8001cde:	43db      	mvns	r3, r3
 8001ce0:	401a      	ands	r2, r3
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	fa93 f3a3 	rbit	r3, r3
 8001cec:	61bb      	str	r3, [r7, #24]
  return result;
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	fab3 f383 	clz	r3, r3
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	6879      	ldr	r1, [r7, #4]
 8001cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	6023      	str	r3, [r4, #0]
             (OutputType << (POSITION_VAL(Pin) * 4U)));
}
 8001d02:	bf00      	nop
 8001d04:	3720      	adds	r7, #32
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bc90      	pop	{r4, r7}
 8001d0a:	4770      	bx	lr

08001d0c <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_DOWN
  *         @arg @ref LL_GPIO_PULL_UP
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b087      	sub	sp, #28
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	68da      	ldr	r2, [r3, #12]
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	0a1b      	lsrs	r3, r3, #8
 8001d20:	43db      	mvns	r3, r3
 8001d22:	401a      	ands	r2, r3
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	0a1b      	lsrs	r3, r3, #8
 8001d28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	fa93 f3a3 	rbit	r3, r3
 8001d30:	613b      	str	r3, [r7, #16]
  return result;
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	fab3 f383 	clz	r3, r3
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	408b      	lsls	r3, r1
 8001d40:	431a      	orrs	r2, r3
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	60da      	str	r2, [r3, #12]
}
 8001d46:	bf00      	nop
 8001d48:	371c      	adds	r7, #28
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bc80      	pop	{r7}
 8001d4e:	4770      	bx	lr

08001d50 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b088      	sub	sp, #32
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	021b      	lsls	r3, r3, #8
 8001d60:	0c1b      	lsrs	r3, r3, #16
 8001d62:	617b      	str	r3, [r7, #20]
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	fa93 f3a3 	rbit	r3, r3
 8001d6e:	60fb      	str	r3, [r7, #12]
  return result;
 8001d70:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8001d72:	fab3 f383 	clz	r3, r3
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 8001d7a:	e044      	b.n	8001e06 <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	409a      	lsls	r2, r3
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	4013      	ands	r3, r2
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d03a      	beq.n	8001e00 <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	2b07      	cmp	r3, #7
 8001d8e:	d806      	bhi.n	8001d9e <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 8001d90:	f240 1201 	movw	r2, #257	; 0x101
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	61bb      	str	r3, [r7, #24]
 8001d9c:	e008      	b.n	8001db0 <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	3b08      	subs	r3, #8
 8001da2:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8001da6:	fa02 f303 	lsl.w	r3, r2, r3
 8001daa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001dae:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	2b08      	cmp	r3, #8
 8001db6:	d106      	bne.n	8001dc6 <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	691b      	ldr	r3, [r3, #16]
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	69b9      	ldr	r1, [r7, #24]
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f7ff ffa3 	bl	8001d0c <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	461a      	mov	r2, r3
 8001dcc:	69b9      	ldr	r1, [r7, #24]
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f7ff ff06 	bl	8001be0 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d003      	beq.n	8001de4 <LL_GPIO_Init+0x94>
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	2b09      	cmp	r3, #9
 8001de2:	d10d      	bne.n	8001e00 <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	461a      	mov	r2, r3
 8001dea:	69b9      	ldr	r1, [r7, #24]
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f7ff ff29 	bl	8001c44 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	461a      	mov	r2, r3
 8001df8:	69b9      	ldr	r1, [r7, #24]
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f7ff ff54 	bl	8001ca8 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	3301      	adds	r3, #1
 8001e04:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 8001e06:	697a      	ldr	r2, [r7, #20]
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d1b4      	bne.n	8001d7c <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8001e12:	2300      	movs	r3, #0
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3720      	adds	r7, #32
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001e20:	4b03      	ldr	r3, [pc, #12]	; (8001e30 <LL_RCC_GetSysClkSource+0x14>)
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f003 030c 	and.w	r3, r3, #12
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bc80      	pop	{r7}
 8001e2e:	4770      	bx	lr
 8001e30:	40021000 	.word	0x40021000

08001e34 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001e38:	4b03      	ldr	r3, [pc, #12]	; (8001e48 <LL_RCC_GetAHBPrescaler+0x14>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bc80      	pop	{r7}
 8001e46:	4770      	bx	lr
 8001e48:	40021000 	.word	0x40021000

08001e4c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001e50:	4b03      	ldr	r3, [pc, #12]	; (8001e60 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bc80      	pop	{r7}
 8001e5e:	4770      	bx	lr
 8001e60:	40021000 	.word	0x40021000

08001e64 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001e68:	4b03      	ldr	r3, [pc, #12]	; (8001e78 <LL_RCC_GetAPB2Prescaler+0x14>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bc80      	pop	{r7}
 8001e76:	4770      	bx	lr
 8001e78:	40021000 	.word	0x40021000

08001e7c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8001e80:	4b03      	ldr	r3, [pc, #12]	; (8001e90 <LL_RCC_PLL_GetMainSource+0x14>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bc80      	pop	{r7}
 8001e8e:	4770      	bx	lr
 8001e90:	40021000 	.word	0x40021000

08001e94 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 8001e98:	4b03      	ldr	r3, [pc, #12]	; (8001ea8 <LL_RCC_PLL_GetMultiplicator+0x14>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bc80      	pop	{r7}
 8001ea6:	4770      	bx	lr
 8001ea8:	40021000 	.word	0x40021000

08001eac <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 8001eb0:	4b04      	ldr	r3, [pc, #16]	; (8001ec4 <LL_RCC_PLL_GetPrediv+0x18>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	0c5b      	lsrs	r3, r3, #17
 8001eb6:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bc80      	pop	{r7}
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	40021000 	.word	0x40021000

08001ec8 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8001ed0:	f000 f820 	bl	8001f14 <RCC_GetSystemClockFreq>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f000 f83e 	bl	8001f60 <RCC_GetHCLKClockFreq>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f000 f84c 	bl	8001f8c <RCC_GetPCLK1ClockFreq>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f000 f858 	bl	8001fb4 <RCC_GetPCLK2ClockFreq>
 8001f04:	4602      	mov	r2, r0
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	60da      	str	r2, [r3, #12]
}
 8001f0a:	bf00      	nop
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
	...

08001f14 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8001f1e:	f7ff ff7d 	bl	8001e1c <LL_RCC_GetSysClkSource>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b08      	cmp	r3, #8
 8001f26:	d00c      	beq.n	8001f42 <RCC_GetSystemClockFreq+0x2e>
 8001f28:	2b08      	cmp	r3, #8
 8001f2a:	d80e      	bhi.n	8001f4a <RCC_GetSystemClockFreq+0x36>
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d002      	beq.n	8001f36 <RCC_GetSystemClockFreq+0x22>
 8001f30:	2b04      	cmp	r3, #4
 8001f32:	d003      	beq.n	8001f3c <RCC_GetSystemClockFreq+0x28>
 8001f34:	e009      	b.n	8001f4a <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8001f36:	4b09      	ldr	r3, [pc, #36]	; (8001f5c <RCC_GetSystemClockFreq+0x48>)
 8001f38:	607b      	str	r3, [r7, #4]
      break;
 8001f3a:	e009      	b.n	8001f50 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8001f3c:	4b07      	ldr	r3, [pc, #28]	; (8001f5c <RCC_GetSystemClockFreq+0x48>)
 8001f3e:	607b      	str	r3, [r7, #4]
      break;
 8001f40:	e006      	b.n	8001f50 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8001f42:	f000 f84b 	bl	8001fdc <RCC_PLL_GetFreqDomain_SYS>
 8001f46:	6078      	str	r0, [r7, #4]
      break;
 8001f48:	e002      	b.n	8001f50 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 8001f4a:	4b04      	ldr	r3, [pc, #16]	; (8001f5c <RCC_GetSystemClockFreq+0x48>)
 8001f4c:	607b      	str	r3, [r7, #4]
      break;
 8001f4e:	bf00      	nop
  }

  return frequency;
 8001f50:	687b      	ldr	r3, [r7, #4]
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	007a1200 	.word	0x007a1200

08001f60 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001f68:	f7ff ff64 	bl	8001e34 <LL_RCC_GetAHBPrescaler>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	091b      	lsrs	r3, r3, #4
 8001f70:	f003 030f 	and.w	r3, r3, #15
 8001f74:	4a04      	ldr	r2, [pc, #16]	; (8001f88 <RCC_GetHCLKClockFreq+0x28>)
 8001f76:	5cd3      	ldrb	r3, [r2, r3]
 8001f78:	461a      	mov	r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	40d3      	lsrs	r3, r2
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	080022c0 	.word	0x080022c0

08001f8c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001f94:	f7ff ff5a 	bl	8001e4c <LL_RCC_GetAPB1Prescaler>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	0a1b      	lsrs	r3, r3, #8
 8001f9c:	4a04      	ldr	r2, [pc, #16]	; (8001fb0 <RCC_GetPCLK1ClockFreq+0x24>)
 8001f9e:	5cd3      	ldrb	r3, [r2, r3]
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	40d3      	lsrs	r3, r2
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	080022d0 	.word	0x080022d0

08001fb4 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8001fbc:	f7ff ff52 	bl	8001e64 <LL_RCC_GetAPB2Prescaler>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	0adb      	lsrs	r3, r3, #11
 8001fc4:	4a04      	ldr	r2, [pc, #16]	; (8001fd8 <RCC_GetPCLK2ClockFreq+0x24>)
 8001fc6:	5cd3      	ldrb	r3, [r2, r3]
 8001fc8:	461a      	mov	r2, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	40d3      	lsrs	r3, r2
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	080022d0 	.word	0x080022d0

08001fdc <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	607b      	str	r3, [r7, #4]
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8001fea:	f7ff ff47 	bl	8001e7c <LL_RCC_PLL_GetMainSource>
 8001fee:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d004      	beq.n	8002000 <RCC_PLL_GetFreqDomain_SYS+0x24>
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ffc:	d003      	beq.n	8002006 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8001ffe:	e00b      	b.n	8002018 <RCC_PLL_GetFreqDomain_SYS+0x3c>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8002000:	4b0d      	ldr	r3, [pc, #52]	; (8002038 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8002002:	607b      	str	r3, [r7, #4]
      break;
 8002004:	e00b      	b.n	800201e <RCC_PLL_GetFreqDomain_SYS+0x42>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 8002006:	f7ff ff51 	bl	8001eac <LL_RCC_PLL_GetPrediv>
 800200a:	4603      	mov	r3, r0
 800200c:	3301      	adds	r3, #1
 800200e:	4a0b      	ldr	r2, [pc, #44]	; (800203c <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8002010:	fbb2 f3f3 	udiv	r3, r2, r3
 8002014:	607b      	str	r3, [r7, #4]
      break;
 8002016:	e002      	b.n	800201e <RCC_PLL_GetFreqDomain_SYS+0x42>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 8002018:	4b07      	ldr	r3, [pc, #28]	; (8002038 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 800201a:	607b      	str	r3, [r7, #4]
      break;
 800201c:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 800201e:	f7ff ff39 	bl	8001e94 <LL_RCC_PLL_GetMultiplicator>
 8002022:	4603      	mov	r3, r0
 8002024:	0c9b      	lsrs	r3, r3, #18
 8002026:	3302      	adds	r3, #2
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	fb02 f303 	mul.w	r3, r2, r3
}
 800202e:	4618      	mov	r0, r3
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	003d0900 	.word	0x003d0900
 800203c:	007a1200 	.word	0x007a1200

08002040 <LL_USART_IsEnabled>:
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002050:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002054:	bf0c      	ite	eq
 8002056:	2301      	moveq	r3, #1
 8002058:	2300      	movne	r3, #0
 800205a:	b2db      	uxtb	r3, r3
}
 800205c:	4618      	mov	r0, r3
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	bc80      	pop	{r7}
 8002064:	4770      	bx	lr

08002066 <LL_USART_SetStopBitsLength>:
{
 8002066:	b480      	push	{r7}
 8002068:	b083      	sub	sp, #12
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
 800206e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	691b      	ldr	r3, [r3, #16]
 8002074:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	431a      	orrs	r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	611a      	str	r2, [r3, #16]
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	bc80      	pop	{r7}
 8002088:	4770      	bx	lr

0800208a <LL_USART_SetHWFlowCtrl>:
{
 800208a:	b480      	push	{r7}
 800208c:	b083      	sub	sp, #12
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
 8002092:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	695b      	ldr	r3, [r3, #20]
 8002098:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	431a      	orrs	r2, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	615a      	str	r2, [r3, #20]
}
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bc80      	pop	{r7}
 80020ac:	4770      	bx	lr
	...

080020b0 <LL_USART_SetBaudRate>:
{
 80020b0:	b480      	push	{r7}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	60b9      	str	r1, [r7, #8]
 80020ba:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80020bc:	68ba      	ldr	r2, [r7, #8]
 80020be:	4613      	mov	r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	4413      	add	r3, r2
 80020c4:	009a      	lsls	r2, r3, #2
 80020c6:	441a      	add	r2, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80020d0:	4a25      	ldr	r2, [pc, #148]	; (8002168 <LL_USART_SetBaudRate+0xb8>)
 80020d2:	fba2 2303 	umull	r2, r3, r2, r3
 80020d6:	095b      	lsrs	r3, r3, #5
 80020d8:	b29b      	uxth	r3, r3
 80020da:	011b      	lsls	r3, r3, #4
 80020dc:	b299      	uxth	r1, r3
 80020de:	68ba      	ldr	r2, [r7, #8]
 80020e0:	4613      	mov	r3, r2
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	4413      	add	r3, r2
 80020e6:	009a      	lsls	r2, r3, #2
 80020e8:	441a      	add	r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	fbb2 f2f3 	udiv	r2, r2, r3
 80020f2:	4b1d      	ldr	r3, [pc, #116]	; (8002168 <LL_USART_SetBaudRate+0xb8>)
 80020f4:	fba3 0302 	umull	r0, r3, r3, r2
 80020f8:	095b      	lsrs	r3, r3, #5
 80020fa:	2064      	movs	r0, #100	; 0x64
 80020fc:	fb00 f303 	mul.w	r3, r0, r3
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	011b      	lsls	r3, r3, #4
 8002104:	3332      	adds	r3, #50	; 0x32
 8002106:	4a18      	ldr	r2, [pc, #96]	; (8002168 <LL_USART_SetBaudRate+0xb8>)
 8002108:	fba2 2303 	umull	r2, r3, r2, r3
 800210c:	095b      	lsrs	r3, r3, #5
 800210e:	b29b      	uxth	r3, r3
 8002110:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002114:	b29b      	uxth	r3, r3
 8002116:	440b      	add	r3, r1
 8002118:	b299      	uxth	r1, r3
 800211a:	68ba      	ldr	r2, [r7, #8]
 800211c:	4613      	mov	r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	4413      	add	r3, r2
 8002122:	009a      	lsls	r2, r3, #2
 8002124:	441a      	add	r2, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	fbb2 f2f3 	udiv	r2, r2, r3
 800212e:	4b0e      	ldr	r3, [pc, #56]	; (8002168 <LL_USART_SetBaudRate+0xb8>)
 8002130:	fba3 0302 	umull	r0, r3, r3, r2
 8002134:	095b      	lsrs	r3, r3, #5
 8002136:	2064      	movs	r0, #100	; 0x64
 8002138:	fb00 f303 	mul.w	r3, r0, r3
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	011b      	lsls	r3, r3, #4
 8002140:	3332      	adds	r3, #50	; 0x32
 8002142:	4a09      	ldr	r2, [pc, #36]	; (8002168 <LL_USART_SetBaudRate+0xb8>)
 8002144:	fba2 2303 	umull	r2, r3, r2, r3
 8002148:	095b      	lsrs	r3, r3, #5
 800214a:	b29b      	uxth	r3, r3
 800214c:	f003 030f 	and.w	r3, r3, #15
 8002150:	b29b      	uxth	r3, r3
 8002152:	440b      	add	r3, r1
 8002154:	b29b      	uxth	r3, r3
 8002156:	461a      	mov	r2, r3
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	609a      	str	r2, [r3, #8]
}
 800215c:	bf00      	nop
 800215e:	3714      	adds	r7, #20
 8002160:	46bd      	mov	sp, r7
 8002162:	bc80      	pop	{r7}
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	51eb851f 	.word	0x51eb851f

0800216c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b088      	sub	sp, #32
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800217a:	2300      	movs	r3, #0
 800217c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f7ff ff5e 	bl	8002040 <LL_USART_IsEnabled>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d145      	bne.n	8002216 <LL_USART_Init+0xaa>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002192:	f023 030c 	bic.w	r3, r3, #12
 8002196:	683a      	ldr	r2, [r7, #0]
 8002198:	6851      	ldr	r1, [r2, #4]
 800219a:	683a      	ldr	r2, [r7, #0]
 800219c:	68d2      	ldr	r2, [r2, #12]
 800219e:	4311      	orrs	r1, r2
 80021a0:	683a      	ldr	r2, [r7, #0]
 80021a2:	6912      	ldr	r2, [r2, #16]
 80021a4:	430a      	orrs	r2, r1
 80021a6:	431a      	orrs	r2, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	4619      	mov	r1, r3
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f7ff ff57 	bl	8002066 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	695b      	ldr	r3, [r3, #20]
 80021bc:	4619      	mov	r1, r3
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f7ff ff63 	bl	800208a <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80021c4:	f107 0308 	add.w	r3, r7, #8
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7ff fe7d 	bl	8001ec8 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a13      	ldr	r2, [pc, #76]	; (8002220 <LL_USART_Init+0xb4>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d102      	bne.n	80021dc <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	61bb      	str	r3, [r7, #24]
 80021da:	e00c      	b.n	80021f6 <LL_USART_Init+0x8a>
    }
    else if (USARTx == USART2)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4a11      	ldr	r2, [pc, #68]	; (8002224 <LL_USART_Init+0xb8>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d102      	bne.n	80021ea <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	61bb      	str	r3, [r7, #24]
 80021e8:	e005      	b.n	80021f6 <LL_USART_Init+0x8a>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a0e      	ldr	r2, [pc, #56]	; (8002228 <LL_USART_Init+0xbc>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d101      	bne.n	80021f6 <LL_USART_Init+0x8a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d00c      	beq.n	8002216 <LL_USART_Init+0xaa>
        && (USART_InitStruct->BaudRate != 0U))
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d008      	beq.n	8002216 <LL_USART_Init+0xaa>
    {
      status = SUCCESS;
 8002204:	2300      	movs	r3, #0
 8002206:	77fb      	strb	r3, [r7, #31]
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->BaudRate);
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 800220c:	461a      	mov	r2, r3
 800220e:	69b9      	ldr	r1, [r7, #24]
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f7ff ff4d 	bl	80020b0 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002216:	7ffb      	ldrb	r3, [r7, #31]
}
 8002218:	4618      	mov	r0, r3
 800221a:	3720      	adds	r7, #32
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	40013800 	.word	0x40013800
 8002224:	40004400 	.word	0x40004400
 8002228:	40004800 	.word	0x40004800

0800222c <memset>:
 800222c:	4603      	mov	r3, r0
 800222e:	4402      	add	r2, r0
 8002230:	4293      	cmp	r3, r2
 8002232:	d100      	bne.n	8002236 <memset+0xa>
 8002234:	4770      	bx	lr
 8002236:	f803 1b01 	strb.w	r1, [r3], #1
 800223a:	e7f9      	b.n	8002230 <memset+0x4>

0800223c <__libc_init_array>:
 800223c:	b570      	push	{r4, r5, r6, lr}
 800223e:	2600      	movs	r6, #0
 8002240:	4d0c      	ldr	r5, [pc, #48]	; (8002274 <__libc_init_array+0x38>)
 8002242:	4c0d      	ldr	r4, [pc, #52]	; (8002278 <__libc_init_array+0x3c>)
 8002244:	1b64      	subs	r4, r4, r5
 8002246:	10a4      	asrs	r4, r4, #2
 8002248:	42a6      	cmp	r6, r4
 800224a:	d109      	bne.n	8002260 <__libc_init_array+0x24>
 800224c:	f000 f81a 	bl	8002284 <_init>
 8002250:	2600      	movs	r6, #0
 8002252:	4d0a      	ldr	r5, [pc, #40]	; (800227c <__libc_init_array+0x40>)
 8002254:	4c0a      	ldr	r4, [pc, #40]	; (8002280 <__libc_init_array+0x44>)
 8002256:	1b64      	subs	r4, r4, r5
 8002258:	10a4      	asrs	r4, r4, #2
 800225a:	42a6      	cmp	r6, r4
 800225c:	d105      	bne.n	800226a <__libc_init_array+0x2e>
 800225e:	bd70      	pop	{r4, r5, r6, pc}
 8002260:	f855 3b04 	ldr.w	r3, [r5], #4
 8002264:	4798      	blx	r3
 8002266:	3601      	adds	r6, #1
 8002268:	e7ee      	b.n	8002248 <__libc_init_array+0xc>
 800226a:	f855 3b04 	ldr.w	r3, [r5], #4
 800226e:	4798      	blx	r3
 8002270:	3601      	adds	r6, #1
 8002272:	e7f2      	b.n	800225a <__libc_init_array+0x1e>
 8002274:	080022ec 	.word	0x080022ec
 8002278:	080022ec 	.word	0x080022ec
 800227c:	080022ec 	.word	0x080022ec
 8002280:	080022f0 	.word	0x080022f0

08002284 <_init>:
 8002284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002286:	bf00      	nop
 8002288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800228a:	bc08      	pop	{r3}
 800228c:	469e      	mov	lr, r3
 800228e:	4770      	bx	lr

08002290 <_fini>:
 8002290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002292:	bf00      	nop
 8002294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002296:	bc08      	pop	{r3}
 8002298:	469e      	mov	lr, r3
 800229a:	4770      	bx	lr
